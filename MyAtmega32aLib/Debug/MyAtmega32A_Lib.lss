
MyAtmega32A_Lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00001238  000012ec  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 000000fc  00000000  00000000  0000131b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00001417  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000301f  00000000  00000000  00001567  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b15  00000000  00000000  00004586  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000109f  00000000  00000000  0000509b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000344  00000000  00000000  0000613c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000273  00000000  00000000  00006480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001c2a  00000000  00000000  000066f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  0000831d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000121a  0000121a  000012ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008428  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.KeyPad_init 00000062  00000f26  00000f26  00000fda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.KeyPad_GetKey 000000a2  00000a30  00000a30  00000ae4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .data.KEY     00000010  00800060  00001228  000012dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 17 .text.LCD_WriteCMD 00000086  00000ca2  00000ca2  00000d56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_init 000000c6  000008ac  000008ac  00000960  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_WriteCHAR 00000086  00000d28  00000d28  00000ddc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_WriteSTRING 00000036  00001068  00001068  0000111c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCD_GoTo 00000030  000010d0  000010d0  00001184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCD_Clear 00000008  00001204  00001204  000012b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCD_WriteNUM 00000252  00000110  00000110  000001c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .progmemx.data 0000005c  000000b4  000000b4  00000168  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 25 .text.normal  00000078  00000eae  00000eae  00000f62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.Hot     0000009e  00000b74  00000b74  00000c28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.pass_succ 00000090  00000c12  00000c12  00000cc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.password 00000174  00000362  00000362  00000416  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.Fire_WITHBUZ 00000086  00000dae  00000dae  00000e62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .bss.f        00000001  00800070  00800070  000012ec  2**0
                  ALLOC
 31 .text.main    000000be  00000972  00000972  00000a26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.ADC_INIT 0000003e  0000102a  0000102a  000010de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.ADC_Read 00000030  00001100  00001100  000011b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.DIO_SetPinDir 000000e2  0000060a  0000060a  000006be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.DIO_SetPinVal 000000e2  000006ec  000006ec  000007a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.DIO_SetPortNibble 00000134  000004d6  000004d6  0000058a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text         00000008  0000120c  0000120c  000012c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text         000000de  000007ce  000007ce  00000882  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text         0000005e  00000f88  00000f88  0000103c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text         0000007a  00000e34  00000e34  00000ee8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text         0000000c  000011f8  000011f8  000012ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text         00000006  00001214  00001214  000012c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text         0000000e  000011ce  000011ce  00001282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text         0000000e  000011dc  000011dc  00001290  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text         00000022  00001130  00001130  000011e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text         00000044  00000fe6  00000fe6  0000109a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text         0000000e  000011ea  000011ea  0000129e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.libgcc.div 0000001c  00001172  00001172  00001226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.libgcc.div 000000a2  00000ad2  00000ad2  00000b86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.libgcc  00000020  00001152  00001152  00001206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.libgcc.builtins 00000032  0000109e  0000109e  00001152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.libgcc  00000012  000011bc  000011bc  00001270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.libgcc  00000018  0000118e  0000118e  00001242  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.__dummy_fini 00000002  00001222  00001222  000012d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.__dummy_funcs_on_exit 00000002  00001224  00001224  000012d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.__dummy_simulator_exit 00000002  00001226  00001226  000012da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.exit    00000016  000011a6  000011a6  0000125a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text._Exit   00000004  0000121e  0000121e  000012d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
   8:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
   c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  10:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  14:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  18:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  1c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  20:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  24:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  28:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  2c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  30:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  34:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  38:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  3c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  40:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  44:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  48:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  4c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>
  50:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 70       	andi	r16, 0x00	; 0
  58:	00 12       	cpse	r0, r16
  5a:	28 00       	.word	0x0028	; ????
  5c:	70 00       	.word	0x0070	; ????
  5e:	71 80       	ldd	r7, Z+1	; 0x01

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d8 e0       	ldi	r29, 0x08	; 8
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	e4 e5       	ldi	r30, 0x54	; 84
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	17 c0       	rjmp	.+46     	; 0xa2 <__do_clear_bss+0x8>
  74:	b5 91       	lpm	r27, Z+
  76:	a5 91       	lpm	r26, Z+
  78:	35 91       	lpm	r19, Z+
  7a:	25 91       	lpm	r18, Z+
  7c:	05 91       	lpm	r16, Z+
  7e:	07 fd       	sbrc	r16, 7
  80:	0c c0       	rjmp	.+24     	; 0x9a <__do_clear_bss>
  82:	95 91       	lpm	r25, Z+
  84:	85 91       	lpm	r24, Z+
  86:	ef 01       	movw	r28, r30
  88:	f9 2f       	mov	r31, r25
  8a:	e8 2f       	mov	r30, r24
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0x20>
  96:	fe 01       	movw	r30, r28
  98:	04 c0       	rjmp	.+8      	; 0xa2 <__do_clear_bss+0x8>

0000009a <__do_clear_bss>:
  9a:	1d 92       	st	X+, r1
  9c:	a2 17       	cp	r26, r18
  9e:	b3 07       	cpc	r27, r19
  a0:	e1 f7       	brne	.-8      	; 0x9a <__do_clear_bss>
  a2:	e0 36       	cpi	r30, 0x60	; 96
  a4:	f4 07       	cpc	r31, r20
  a6:	31 f7       	brne	.-52     	; 0x74 <__do_copy_data+0x8>
  a8:	0e 94 b9 04 	call	0x972	; 0x972 <main>
  ac:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <exit>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>

Disassembly of section .text:

0000121a <__bad_interrupt>:
    121a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.KeyPad_init:

00000f26 <KeyPad_init>:
 f26:	87 b3       	in	r24, 0x17	; 23
 f28:	80 61       	ori	r24, 0x10	; 16
 f2a:	87 bb       	out	0x17, r24	; 23
 f2c:	87 b3       	in	r24, 0x17	; 23
 f2e:	80 62       	ori	r24, 0x20	; 32
 f30:	87 bb       	out	0x17, r24	; 23
 f32:	87 b3       	in	r24, 0x17	; 23
 f34:	80 64       	ori	r24, 0x40	; 64
 f36:	87 bb       	out	0x17, r24	; 23
 f38:	87 b3       	in	r24, 0x17	; 23
 f3a:	80 68       	ori	r24, 0x80	; 128
 f3c:	87 bb       	out	0x17, r24	; 23
 f3e:	88 b3       	in	r24, 0x18	; 24
 f40:	80 61       	ori	r24, 0x10	; 16
 f42:	88 bb       	out	0x18, r24	; 24
 f44:	88 b3       	in	r24, 0x18	; 24
 f46:	80 62       	ori	r24, 0x20	; 32
 f48:	88 bb       	out	0x18, r24	; 24
 f4a:	88 b3       	in	r24, 0x18	; 24
 f4c:	80 64       	ori	r24, 0x40	; 64
 f4e:	88 bb       	out	0x18, r24	; 24
 f50:	88 b3       	in	r24, 0x18	; 24
 f52:	80 68       	ori	r24, 0x80	; 128
 f54:	88 bb       	out	0x18, r24	; 24
 f56:	84 b3       	in	r24, 0x14	; 20
 f58:	87 7f       	andi	r24, 0xF7	; 247
 f5a:	84 bb       	out	0x14, r24	; 20
 f5c:	84 b3       	in	r24, 0x14	; 20
 f5e:	8f 7e       	andi	r24, 0xEF	; 239
 f60:	84 bb       	out	0x14, r24	; 20
 f62:	84 b3       	in	r24, 0x14	; 20
 f64:	8f 7d       	andi	r24, 0xDF	; 223
 f66:	84 bb       	out	0x14, r24	; 20
 f68:	84 b3       	in	r24, 0x14	; 20
 f6a:	8f 7b       	andi	r24, 0xBF	; 191
 f6c:	84 bb       	out	0x14, r24	; 20
 f6e:	85 b3       	in	r24, 0x15	; 21
 f70:	88 60       	ori	r24, 0x08	; 8
 f72:	85 bb       	out	0x15, r24	; 21
 f74:	85 b3       	in	r24, 0x15	; 21
 f76:	80 61       	ori	r24, 0x10	; 16
 f78:	85 bb       	out	0x15, r24	; 21
 f7a:	85 b3       	in	r24, 0x15	; 21
 f7c:	80 62       	ori	r24, 0x20	; 32
 f7e:	85 bb       	out	0x15, r24	; 21
 f80:	85 b3       	in	r24, 0x15	; 21
 f82:	80 64       	ori	r24, 0x40	; 64
 f84:	85 bb       	out	0x15, r24	; 21
 f86:	08 95       	ret

Disassembly of section .text.KeyPad_GetKey:

00000a30 <KeyPad_GetKey>:
 a30:	cf 93       	push	r28
 a32:	df 93       	push	r29
 a34:	a0 e0       	ldi	r26, 0x00	; 0
 a36:	b0 e0       	ldi	r27, 0x00	; 0
 a38:	80 e0       	ldi	r24, 0x00	; 0
 a3a:	44 c0       	rjmp	.+136    	; 0xac4 <KeyPad_GetKey+0x94>
 a3c:	98 b3       	in	r25, 0x18	; 24
 a3e:	9d 01       	movw	r18, r26
 a40:	2c 5f       	subi	r18, 0xFC	; 252
 a42:	3f 4f       	sbci	r19, 0xFF	; 255
 a44:	e1 e0       	ldi	r30, 0x01	; 1
 a46:	f0 e0       	ldi	r31, 0x00	; 0
 a48:	02 c0       	rjmp	.+4      	; 0xa4e <KeyPad_GetKey+0x1e>
 a4a:	ee 0f       	add	r30, r30
 a4c:	ff 1f       	adc	r31, r31
 a4e:	2a 95       	dec	r18
 a50:	e2 f7       	brpl	.-8      	; 0xa4a <KeyPad_GetKey+0x1a>
 a52:	2e 2f       	mov	r18, r30
 a54:	20 95       	com	r18
 a56:	92 23       	and	r25, r18
 a58:	98 bb       	out	0x18, r25	; 24
 a5a:	40 e0       	ldi	r20, 0x00	; 0
 a5c:	50 e0       	ldi	r21, 0x00	; 0
 a5e:	2b c0       	rjmp	.+86     	; 0xab6 <KeyPad_GetKey+0x86>
 a60:	23 b3       	in	r18, 0x13	; 19
 a62:	ba 01       	movw	r22, r20
 a64:	6d 5f       	subi	r22, 0xFD	; 253
 a66:	7f 4f       	sbci	r23, 0xFF	; 255
 a68:	30 e0       	ldi	r19, 0x00	; 0
 a6a:	06 2e       	mov	r0, r22
 a6c:	02 c0       	rjmp	.+4      	; 0xa72 <KeyPad_GetKey+0x42>
 a6e:	35 95       	asr	r19
 a70:	27 95       	ror	r18
 a72:	0a 94       	dec	r0
 a74:	e2 f7       	brpl	.-8      	; 0xa6e <KeyPad_GetKey+0x3e>
 a76:	20 fd       	sbrc	r18, 0
 a78:	1c c0       	rjmp	.+56     	; 0xab2 <KeyPad_GetKey+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a7a:	2f e7       	ldi	r18, 0x7F	; 127
 a7c:	38 e3       	ldi	r19, 0x38	; 56
 a7e:	91 e0       	ldi	r25, 0x01	; 1
 a80:	21 50       	subi	r18, 0x01	; 1
 a82:	30 40       	sbci	r19, 0x00	; 0
 a84:	90 40       	sbci	r25, 0x00	; 0
 a86:	e1 f7       	brne	.-8      	; 0xa80 <KeyPad_GetKey+0x50>
 a88:	00 c0       	rjmp	.+0      	; 0xa8a <KeyPad_GetKey+0x5a>
 a8a:	00 00       	nop
 a8c:	23 b3       	in	r18, 0x13	; 19
 a8e:	30 e0       	ldi	r19, 0x00	; 0
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <KeyPad_GetKey+0x66>
 a92:	35 95       	asr	r19
 a94:	27 95       	ror	r18
 a96:	6a 95       	dec	r22
 a98:	e2 f7       	brpl	.-8      	; 0xa92 <KeyPad_GetKey+0x62>
 a9a:	20 fd       	sbrc	r18, 0
 a9c:	0a c0       	rjmp	.+20     	; 0xab2 <KeyPad_GetKey+0x82>
 a9e:	ea 01       	movw	r28, r20
 aa0:	cc 0f       	add	r28, r28
 aa2:	dd 1f       	adc	r29, r29
 aa4:	cc 0f       	add	r28, r28
 aa6:	dd 1f       	adc	r29, r29
 aa8:	c0 5a       	subi	r28, 0xA0	; 160
 aaa:	df 4f       	sbci	r29, 0xFF	; 255
 aac:	ca 0f       	add	r28, r26
 aae:	db 1f       	adc	r29, r27
 ab0:	88 81       	ld	r24, Y
 ab2:	4f 5f       	subi	r20, 0xFF	; 255
 ab4:	5f 4f       	sbci	r21, 0xFF	; 255
 ab6:	44 30       	cpi	r20, 0x04	; 4
 ab8:	51 05       	cpc	r21, r1
 aba:	94 f2       	brlt	.-92     	; 0xa60 <KeyPad_GetKey+0x30>
 abc:	98 b3       	in	r25, 0x18	; 24
 abe:	e9 2b       	or	r30, r25
 ac0:	e8 bb       	out	0x18, r30	; 24
 ac2:	11 96       	adiw	r26, 0x01	; 1
 ac4:	a4 30       	cpi	r26, 0x04	; 4
 ac6:	b1 05       	cpc	r27, r1
 ac8:	0c f4       	brge	.+2      	; 0xacc <KeyPad_GetKey+0x9c>
 aca:	b8 cf       	rjmp	.-144    	; 0xa3c <KeyPad_GetKey+0xc>
 acc:	df 91       	pop	r29
 ace:	cf 91       	pop	r28
 ad0:	08 95       	ret

Disassembly of section .text.LCD_WriteCMD:

00000ca2 <LCD_WriteCMD>:
 ca2:	cf 93       	push	r28
 ca4:	c8 2f       	mov	r28, r24
 ca6:	40 e0       	ldi	r20, 0x00	; 0
 ca8:	61 e0       	ldi	r22, 0x01	; 1
 caa:	81 e0       	ldi	r24, 0x01	; 1
 cac:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
 cb0:	40 e0       	ldi	r20, 0x00	; 0
 cb2:	62 e0       	ldi	r22, 0x02	; 2
 cb4:	81 e0       	ldi	r24, 0x01	; 1
 cb6:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
 cba:	40 e0       	ldi	r20, 0x00	; 0
 cbc:	63 e0       	ldi	r22, 0x03	; 3
 cbe:	81 e0       	ldi	r24, 0x01	; 1
 cc0:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
 cc4:	8f e9       	ldi	r24, 0x9F	; 159
 cc6:	9f e0       	ldi	r25, 0x0F	; 15
 cc8:	01 97       	sbiw	r24, 0x01	; 1
 cca:	f1 f7       	brne	.-4      	; 0xcc8 <LCD_WriteCMD+0x26>
 ccc:	00 c0       	rjmp	.+0      	; 0xcce <LCD_WriteCMD+0x2c>
 cce:	00 00       	nop
 cd0:	41 e0       	ldi	r20, 0x01	; 1
 cd2:	63 e0       	ldi	r22, 0x03	; 3
 cd4:	81 e0       	ldi	r24, 0x01	; 1
 cd6:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
 cda:	40 e0       	ldi	r20, 0x00	; 0
 cdc:	6c 2f       	mov	r22, r28
 cde:	80 e0       	ldi	r24, 0x00	; 0
 ce0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_SetPortNibble>
 ce4:	40 e0       	ldi	r20, 0x00	; 0
 ce6:	63 e0       	ldi	r22, 0x03	; 3
 ce8:	81 e0       	ldi	r24, 0x01	; 1
 cea:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
 cee:	8f e9       	ldi	r24, 0x9F	; 159
 cf0:	9f e0       	ldi	r25, 0x0F	; 15
 cf2:	01 97       	sbiw	r24, 0x01	; 1
 cf4:	f1 f7       	brne	.-4      	; 0xcf2 <LCD_WriteCMD+0x50>
 cf6:	00 c0       	rjmp	.+0      	; 0xcf8 <LCD_WriteCMD+0x56>
 cf8:	00 00       	nop
 cfa:	41 e0       	ldi	r20, 0x01	; 1
 cfc:	63 e0       	ldi	r22, 0x03	; 3
 cfe:	81 e0       	ldi	r24, 0x01	; 1
 d00:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
 d04:	41 e0       	ldi	r20, 0x01	; 1
 d06:	6c 2f       	mov	r22, r28
 d08:	80 e0       	ldi	r24, 0x00	; 0
 d0a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_SetPortNibble>
 d0e:	40 e0       	ldi	r20, 0x00	; 0
 d10:	63 e0       	ldi	r22, 0x03	; 3
 d12:	81 e0       	ldi	r24, 0x01	; 1
 d14:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
 d18:	8f e9       	ldi	r24, 0x9F	; 159
 d1a:	9f e0       	ldi	r25, 0x0F	; 15
 d1c:	01 97       	sbiw	r24, 0x01	; 1
 d1e:	f1 f7       	brne	.-4      	; 0xd1c <LCD_WriteCMD+0x7a>
 d20:	00 c0       	rjmp	.+0      	; 0xd22 <LCD_WriteCMD+0x80>
 d22:	00 00       	nop
 d24:	cf 91       	pop	r28
 d26:	08 95       	ret

Disassembly of section .text.LCD_init:

000008ac <LCD_init>:
 8ac:	8f ef       	ldi	r24, 0xFF	; 255
 8ae:	99 ef       	ldi	r25, 0xF9	; 249
 8b0:	01 97       	sbiw	r24, 0x01	; 1
 8b2:	f1 f7       	brne	.-4      	; 0x8b0 <LCD_init+0x4>
 8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <LCD_init+0xa>
 8b6:	00 00       	nop
 8b8:	41 e0       	ldi	r20, 0x01	; 1
 8ba:	61 e0       	ldi	r22, 0x01	; 1
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_SetPinDir>
 8c2:	41 e0       	ldi	r20, 0x01	; 1
 8c4:	62 e0       	ldi	r22, 0x02	; 2
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_SetPinDir>
 8cc:	41 e0       	ldi	r20, 0x01	; 1
 8ce:	63 e0       	ldi	r22, 0x03	; 3
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_SetPinDir>
 8d6:	41 e0       	ldi	r20, 0x01	; 1
 8d8:	64 e0       	ldi	r22, 0x04	; 4
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_SetPinDir>
 8e0:	41 e0       	ldi	r20, 0x01	; 1
 8e2:	65 e0       	ldi	r22, 0x05	; 5
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_SetPinDir>
 8ea:	41 e0       	ldi	r20, 0x01	; 1
 8ec:	66 e0       	ldi	r22, 0x06	; 6
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_SetPinDir>
 8f4:	41 e0       	ldi	r20, 0x01	; 1
 8f6:	67 e0       	ldi	r22, 0x07	; 7
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_SetPinDir>
 8fe:	83 e3       	ldi	r24, 0x33	; 51
 900:	0e 94 51 06 	call	0xca2	; 0xca2 <LCD_WriteCMD>
 904:	8f e9       	ldi	r24, 0x9F	; 159
 906:	9f e0       	ldi	r25, 0x0F	; 15
 908:	01 97       	sbiw	r24, 0x01	; 1
 90a:	f1 f7       	brne	.-4      	; 0x908 <LCD_init+0x5c>
 90c:	00 c0       	rjmp	.+0      	; 0x90e <LCD_init+0x62>
 90e:	00 00       	nop
 910:	82 e3       	ldi	r24, 0x32	; 50
 912:	0e 94 51 06 	call	0xca2	; 0xca2 <LCD_WriteCMD>
 916:	8f e9       	ldi	r24, 0x9F	; 159
 918:	9f e0       	ldi	r25, 0x0F	; 15
 91a:	01 97       	sbiw	r24, 0x01	; 1
 91c:	f1 f7       	brne	.-4      	; 0x91a <LCD_init+0x6e>
 91e:	00 c0       	rjmp	.+0      	; 0x920 <LCD_init+0x74>
 920:	00 00       	nop
 922:	88 e2       	ldi	r24, 0x28	; 40
 924:	0e 94 51 06 	call	0xca2	; 0xca2 <LCD_WriteCMD>
 928:	8c e0       	ldi	r24, 0x0C	; 12
 92a:	0e 94 51 06 	call	0xca2	; 0xca2 <LCD_WriteCMD>
 92e:	8f e9       	ldi	r24, 0x9F	; 159
 930:	9f e0       	ldi	r25, 0x0F	; 15
 932:	01 97       	sbiw	r24, 0x01	; 1
 934:	f1 f7       	brne	.-4      	; 0x932 <LCD_init+0x86>
 936:	00 c0       	rjmp	.+0      	; 0x938 <LCD_init+0x8c>
 938:	00 00       	nop
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	0e 94 51 06 	call	0xca2	; 0xca2 <LCD_WriteCMD>
 940:	8f e3       	ldi	r24, 0x3F	; 63
 942:	9f e1       	ldi	r25, 0x1F	; 31
 944:	01 97       	sbiw	r24, 0x01	; 1
 946:	f1 f7       	brne	.-4      	; 0x944 <LCD_init+0x98>
 948:	00 c0       	rjmp	.+0      	; 0x94a <LCD_init+0x9e>
 94a:	00 00       	nop
 94c:	86 e0       	ldi	r24, 0x06	; 6
 94e:	0e 94 51 06 	call	0xca2	; 0xca2 <LCD_WriteCMD>
 952:	8f e9       	ldi	r24, 0x9F	; 159
 954:	9f e0       	ldi	r25, 0x0F	; 15
 956:	01 97       	sbiw	r24, 0x01	; 1
 958:	f1 f7       	brne	.-4      	; 0x956 <LCD_init+0xaa>
 95a:	00 c0       	rjmp	.+0      	; 0x95c <LCD_init+0xb0>
 95c:	00 00       	nop
 95e:	82 e0       	ldi	r24, 0x02	; 2
 960:	0e 94 51 06 	call	0xca2	; 0xca2 <LCD_WriteCMD>
 964:	8f e3       	ldi	r24, 0x3F	; 63
 966:	9f e1       	ldi	r25, 0x1F	; 31
 968:	01 97       	sbiw	r24, 0x01	; 1
 96a:	f1 f7       	brne	.-4      	; 0x968 <LCD_init+0xbc>
 96c:	00 c0       	rjmp	.+0      	; 0x96e <LCD_init+0xc2>
 96e:	00 00       	nop
 970:	08 95       	ret

Disassembly of section .text.LCD_WriteCHAR:

00000d28 <LCD_WriteCHAR>:
 d28:	cf 93       	push	r28
 d2a:	c8 2f       	mov	r28, r24
 d2c:	41 e0       	ldi	r20, 0x01	; 1
 d2e:	61 e0       	ldi	r22, 0x01	; 1
 d30:	81 e0       	ldi	r24, 0x01	; 1
 d32:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
 d36:	40 e0       	ldi	r20, 0x00	; 0
 d38:	62 e0       	ldi	r22, 0x02	; 2
 d3a:	81 e0       	ldi	r24, 0x01	; 1
 d3c:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
 d40:	40 e0       	ldi	r20, 0x00	; 0
 d42:	63 e0       	ldi	r22, 0x03	; 3
 d44:	81 e0       	ldi	r24, 0x01	; 1
 d46:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
 d4a:	8f e9       	ldi	r24, 0x9F	; 159
 d4c:	9f e0       	ldi	r25, 0x0F	; 15
 d4e:	01 97       	sbiw	r24, 0x01	; 1
 d50:	f1 f7       	brne	.-4      	; 0xd4e <LCD_WriteCHAR+0x26>
 d52:	00 c0       	rjmp	.+0      	; 0xd54 <LCD_WriteCHAR+0x2c>
 d54:	00 00       	nop
 d56:	41 e0       	ldi	r20, 0x01	; 1
 d58:	63 e0       	ldi	r22, 0x03	; 3
 d5a:	81 e0       	ldi	r24, 0x01	; 1
 d5c:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
 d60:	40 e0       	ldi	r20, 0x00	; 0
 d62:	6c 2f       	mov	r22, r28
 d64:	80 e0       	ldi	r24, 0x00	; 0
 d66:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_SetPortNibble>
 d6a:	40 e0       	ldi	r20, 0x00	; 0
 d6c:	63 e0       	ldi	r22, 0x03	; 3
 d6e:	81 e0       	ldi	r24, 0x01	; 1
 d70:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
 d74:	8f e9       	ldi	r24, 0x9F	; 159
 d76:	9f e0       	ldi	r25, 0x0F	; 15
 d78:	01 97       	sbiw	r24, 0x01	; 1
 d7a:	f1 f7       	brne	.-4      	; 0xd78 <LCD_WriteCHAR+0x50>
 d7c:	00 c0       	rjmp	.+0      	; 0xd7e <LCD_WriteCHAR+0x56>
 d7e:	00 00       	nop
 d80:	41 e0       	ldi	r20, 0x01	; 1
 d82:	63 e0       	ldi	r22, 0x03	; 3
 d84:	81 e0       	ldi	r24, 0x01	; 1
 d86:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
 d8a:	41 e0       	ldi	r20, 0x01	; 1
 d8c:	6c 2f       	mov	r22, r28
 d8e:	80 e0       	ldi	r24, 0x00	; 0
 d90:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_SetPortNibble>
 d94:	40 e0       	ldi	r20, 0x00	; 0
 d96:	63 e0       	ldi	r22, 0x03	; 3
 d98:	81 e0       	ldi	r24, 0x01	; 1
 d9a:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
 d9e:	8f e9       	ldi	r24, 0x9F	; 159
 da0:	9f e0       	ldi	r25, 0x0F	; 15
 da2:	01 97       	sbiw	r24, 0x01	; 1
 da4:	f1 f7       	brne	.-4      	; 0xda2 <LCD_WriteCHAR+0x7a>
 da6:	00 c0       	rjmp	.+0      	; 0xda8 <LCD_WriteCHAR+0x80>
 da8:	00 00       	nop
 daa:	cf 91       	pop	r28
 dac:	08 95       	ret

Disassembly of section .text.LCD_WriteSTRING:

00001068 <LCD_WriteSTRING>:
    1068:	cf 92       	push	r12
    106a:	df 92       	push	r13
    106c:	ef 92       	push	r14
    106e:	cf 93       	push	r28
    1070:	6b 01       	movw	r12, r22
    1072:	e8 2e       	mov	r14, r24
    1074:	c0 e0       	ldi	r28, 0x00	; 0
    1076:	03 c0       	rjmp	.+6      	; 0x107e <LCD_WriteSTRING+0x16>
    1078:	0e 94 94 06 	call	0xd28	; 0xd28 <LCD_WriteCHAR>
    107c:	cf 5f       	subi	r28, 0xFF	; 255
    107e:	ae 2d       	mov	r26, r14
    1080:	c6 01       	movw	r24, r12
    1082:	8c 0f       	add	r24, r28
    1084:	91 1d       	adc	r25, r1
    1086:	a1 1d       	adc	r26, r1
    1088:	fc 01       	movw	r30, r24
    108a:	84 91       	lpm	r24, Z
    108c:	a7 fd       	sbrc	r26, 7
    108e:	80 81       	ld	r24, Z
    1090:	81 11       	cpse	r24, r1
    1092:	f2 cf       	rjmp	.-28     	; 0x1078 <LCD_WriteSTRING+0x10>
    1094:	cf 91       	pop	r28
    1096:	ef 90       	pop	r14
    1098:	df 90       	pop	r13
    109a:	cf 90       	pop	r12
    109c:	08 95       	ret

Disassembly of section .text.LCD_GoTo:

000010d0 <LCD_GoTo>:
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <LCD_GoTo+0x6>
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	90 e8       	ldi	r25, 0x80	; 128
    10dc:	99 83       	std	Y+1, r25	; 0x01
    10de:	90 ec       	ldi	r25, 0xC0	; 192
    10e0:	9a 83       	std	Y+2, r25	; 0x02
    10e2:	e1 e0       	ldi	r30, 0x01	; 1
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	ec 0f       	add	r30, r28
    10e8:	fd 1f       	adc	r31, r29
    10ea:	e8 0f       	add	r30, r24
    10ec:	f1 1d       	adc	r31, r1
    10ee:	80 81       	ld	r24, Z
    10f0:	86 0f       	add	r24, r22
    10f2:	0e 94 51 06 	call	0xca2	; 0xca2 <LCD_WriteCMD>
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

Disassembly of section .text.LCD_Clear:

00001204 <LCD_Clear>:
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	0e 94 51 06 	call	0xca2	; 0xca2 <LCD_WriteCMD>
    120a:	08 95       	ret

Disassembly of section .text.LCD_WriteNUM:

00000110 <LCD_WriteNUM>:
 110:	2f 92       	push	r2
 112:	3f 92       	push	r3
 114:	4f 92       	push	r4
 116:	5f 92       	push	r5
 118:	6f 92       	push	r6
 11a:	7f 92       	push	r7
 11c:	8f 92       	push	r8
 11e:	9f 92       	push	r9
 120:	af 92       	push	r10
 122:	bf 92       	push	r11
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	60 97       	sbiw	r28, 0x10	; 16
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	de bf       	out	0x3e, r29	; 62
 140:	0f be       	out	0x3f, r0	; 63
 142:	cd bf       	out	0x3d, r28	; 61
 144:	29 83       	std	Y+1, r18	; 0x01
 146:	3a 83       	std	Y+2, r19	; 0x02
 148:	4b 83       	std	Y+3, r20	; 0x03
 14a:	5c 83       	std	Y+4, r21	; 0x04
 14c:	6d 83       	std	Y+5, r22	; 0x05
 14e:	7e 83       	std	Y+6, r23	; 0x06
 150:	38 2e       	mov	r3, r24
 152:	29 2e       	mov	r2, r25
 154:	a0 e0       	ldi	r26, 0x00	; 0
 156:	0e 94 c7 08 	call	0x118e	; 0x118e <__cmpdi2_s8>
 15a:	21 f4       	brne	.+8      	; 0x164 <LCD_WriteNUM+0x54>
 15c:	80 e3       	ldi	r24, 0x30	; 48
 15e:	0e 94 94 06 	call	0xd28	; 0xd28 <LCD_WriteCHAR>
 162:	e6 c0       	rjmp	.+460    	; 0x330 <LCD_WriteNUM+0x220>
 164:	29 81       	ldd	r18, Y+1	; 0x01
 166:	3a 81       	ldd	r19, Y+2	; 0x02
 168:	4b 81       	ldd	r20, Y+3	; 0x03
 16a:	5c 81       	ldd	r21, Y+4	; 0x04
 16c:	6d 81       	ldd	r22, Y+5	; 0x05
 16e:	7e 81       	ldd	r23, Y+6	; 0x06
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	0e 94 c7 08 	call	0x118e	; 0x118e <__cmpdi2_s8>
 176:	ac f4       	brge	.+42     	; 0x1a2 <LCD_WriteNUM+0x92>
 178:	8d e2       	ldi	r24, 0x2D	; 45
 17a:	0e 94 94 06 	call	0xd28	; 0xd28 <LCD_WriteCHAR>
 17e:	29 81       	ldd	r18, Y+1	; 0x01
 180:	3a 81       	ldd	r19, Y+2	; 0x02
 182:	4b 81       	ldd	r20, Y+3	; 0x03
 184:	5c 81       	ldd	r21, Y+4	; 0x04
 186:	6d 81       	ldd	r22, Y+5	; 0x05
 188:	7e 81       	ldd	r23, Y+6	; 0x06
 18a:	83 2d       	mov	r24, r3
 18c:	92 2d       	mov	r25, r2
 18e:	0e 94 a9 08 	call	0x1152	; 0x1152 <__negdi2>
 192:	29 83       	std	Y+1, r18	; 0x01
 194:	3a 83       	std	Y+2, r19	; 0x02
 196:	4b 83       	std	Y+3, r20	; 0x03
 198:	5c 83       	std	Y+4, r21	; 0x04
 19a:	6d 83       	std	Y+5, r22	; 0x05
 19c:	7e 83       	std	Y+6, r23	; 0x06
 19e:	38 2e       	mov	r3, r24
 1a0:	29 2e       	mov	r2, r25
 1a2:	29 81       	ldd	r18, Y+1	; 0x01
 1a4:	3a 81       	ldd	r19, Y+2	; 0x02
 1a6:	4b 81       	ldd	r20, Y+3	; 0x03
 1a8:	5c 81       	ldd	r21, Y+4	; 0x04
 1aa:	6d 81       	ldd	r22, Y+5	; 0x05
 1ac:	7e 81       	ldd	r23, Y+6	; 0x06
 1ae:	83 2d       	mov	r24, r3
 1b0:	92 2d       	mov	r25, r2
 1b2:	a0 e0       	ldi	r26, 0x00	; 0
 1b4:	0e 94 c7 08 	call	0x118e	; 0x118e <__cmpdi2_s8>
 1b8:	09 f0       	breq	.+2      	; 0x1bc <LCD_WriteNUM+0xac>
 1ba:	94 f5       	brge	.+100    	; 0x220 <LCD_WriteNUM+0x110>
 1bc:	b9 c0       	rjmp	.+370    	; 0x330 <LCD_WriteNUM+0x220>
 1be:	2d 85       	ldd	r18, Y+13	; 0x0d
 1c0:	39 2d       	mov	r19, r9
 1c2:	48 2d       	mov	r20, r8
 1c4:	57 2d       	mov	r21, r7
 1c6:	66 2d       	mov	r22, r6
 1c8:	75 2d       	mov	r23, r5
 1ca:	8e 85       	ldd	r24, Y+14	; 0x0e
 1cc:	94 2d       	mov	r25, r4
 1ce:	01 e0       	ldi	r16, 0x01	; 1
 1d0:	0e 94 4f 08 	call	0x109e	; 0x109e <__ashldi3>
 1d4:	82 2e       	mov	r8, r18
 1d6:	93 2e       	mov	r9, r19
 1d8:	48 87       	std	Y+8, r20	; 0x08
 1da:	5f 83       	std	Y+7, r21	; 0x07
 1dc:	b6 2f       	mov	r27, r22
 1de:	a7 2f       	mov	r26, r23
 1e0:	f8 2f       	mov	r31, r24
 1e2:	e9 2f       	mov	r30, r25
 1e4:	02 e0       	ldi	r16, 0x02	; 2
 1e6:	0e 94 4f 08 	call	0x109e	; 0x109e <__ashldi3>
 1ea:	a2 2e       	mov	r10, r18
 1ec:	b3 2e       	mov	r11, r19
 1ee:	c4 2e       	mov	r12, r20
 1f0:	d5 2e       	mov	r13, r21
 1f2:	e6 2e       	mov	r14, r22
 1f4:	f7 2e       	mov	r15, r23
 1f6:	08 2f       	mov	r16, r24
 1f8:	19 2f       	mov	r17, r25
 1fa:	28 2d       	mov	r18, r8
 1fc:	39 2d       	mov	r19, r9
 1fe:	48 85       	ldd	r20, Y+8	; 0x08
 200:	5f 81       	ldd	r21, Y+7	; 0x07
 202:	6b 2f       	mov	r22, r27
 204:	7a 2f       	mov	r23, r26
 206:	8f 2f       	mov	r24, r31
 208:	9e 2f       	mov	r25, r30
 20a:	0e 94 de 08 	call	0x11bc	; 0x11bc <__adddi3>
 20e:	2d 87       	std	Y+13, r18	; 0x0d
 210:	93 2e       	mov	r9, r19
 212:	84 2e       	mov	r8, r20
 214:	75 2e       	mov	r7, r21
 216:	66 2e       	mov	r6, r22
 218:	57 2e       	mov	r5, r23
 21a:	8e 87       	std	Y+14, r24	; 0x0e
 21c:	49 2e       	mov	r4, r25
 21e:	0f c0       	rjmp	.+30     	; 0x23e <LCD_WriteNUM+0x12e>
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	1f 82       	std	Y+7, r1	; 0x07
 224:	18 86       	std	Y+8, r1	; 0x08
 226:	19 86       	std	Y+9, r1	; 0x09
 228:	1a 86       	std	Y+10, r1	; 0x0a
 22a:	1b 86       	std	Y+11, r1	; 0x0b
 22c:	1e 86       	std	Y+14, r1	; 0x0e
 22e:	1c 86       	std	Y+12, r1	; 0x0c
 230:	8d 87       	std	Y+13, r24	; 0x0d
 232:	91 2c       	mov	r9, r1
 234:	81 2c       	mov	r8, r1
 236:	71 2c       	mov	r7, r1
 238:	61 2c       	mov	r6, r1
 23a:	51 2c       	mov	r5, r1
 23c:	41 2c       	mov	r4, r1
 23e:	ad 84       	ldd	r10, Y+13	; 0x0d
 240:	b9 2c       	mov	r11, r9
 242:	c8 2c       	mov	r12, r8
 244:	d7 2c       	mov	r13, r7
 246:	e6 2c       	mov	r14, r6
 248:	f5 2c       	mov	r15, r5
 24a:	0e 85       	ldd	r16, Y+14	; 0x0e
 24c:	14 2d       	mov	r17, r4
 24e:	29 81       	ldd	r18, Y+1	; 0x01
 250:	3a 81       	ldd	r19, Y+2	; 0x02
 252:	4b 81       	ldd	r20, Y+3	; 0x03
 254:	5c 81       	ldd	r21, Y+4	; 0x04
 256:	6d 81       	ldd	r22, Y+5	; 0x05
 258:	7e 81       	ldd	r23, Y+6	; 0x06
 25a:	83 2d       	mov	r24, r3
 25c:	92 2d       	mov	r25, r2
 25e:	0e 94 bb 08 	call	0x1176	; 0x1176 <__udivdi3>
 262:	a0 e0       	ldi	r26, 0x00	; 0
 264:	0e 94 c7 08 	call	0x118e	; 0x118e <__cmpdi2_s8>
 268:	09 f0       	breq	.+2      	; 0x26c <LCD_WriteNUM+0x15c>
 26a:	a9 cf       	rjmp	.-174    	; 0x1be <LCD_WriteNUM+0xae>
 26c:	9f 82       	std	Y+7, r9	; 0x07
 26e:	88 86       	std	Y+8, r8	; 0x08
 270:	79 86       	std	Y+9, r7	; 0x09
 272:	6a 86       	std	Y+10, r6	; 0x0a
 274:	5b 86       	std	Y+11, r5	; 0x0b
 276:	4c 86       	std	Y+12, r4	; 0x0c
 278:	0f 2e       	mov	r0, r31
 27a:	fa e0       	ldi	r31, 0x0A	; 10
 27c:	af 2e       	mov	r10, r31
 27e:	f0 2d       	mov	r31, r0
 280:	b1 2c       	mov	r11, r1
 282:	c1 2c       	mov	r12, r1
 284:	d1 2c       	mov	r13, r1
 286:	e1 2c       	mov	r14, r1
 288:	f1 2c       	mov	r15, r1
 28a:	00 e0       	ldi	r16, 0x00	; 0
 28c:	10 e0       	ldi	r17, 0x00	; 0
 28e:	2d 85       	ldd	r18, Y+13	; 0x0d
 290:	3f 81       	ldd	r19, Y+7	; 0x07
 292:	48 85       	ldd	r20, Y+8	; 0x08
 294:	59 85       	ldd	r21, Y+9	; 0x09
 296:	6a 85       	ldd	r22, Y+10	; 0x0a
 298:	7b 85       	ldd	r23, Y+11	; 0x0b
 29a:	8e 85       	ldd	r24, Y+14	; 0x0e
 29c:	9c 85       	ldd	r25, Y+12	; 0x0c
 29e:	0e 94 bb 08 	call	0x1176	; 0x1176 <__udivdi3>
 2a2:	42 2e       	mov	r4, r18
 2a4:	53 2e       	mov	r5, r19
 2a6:	64 2e       	mov	r6, r20
 2a8:	75 2e       	mov	r7, r21
 2aa:	86 2e       	mov	r8, r22
 2ac:	97 2e       	mov	r9, r23
 2ae:	88 8b       	std	Y+16, r24	; 0x10
 2b0:	9f 87       	std	Y+15, r25	; 0x0f
 2b2:	2d 87       	std	Y+13, r18	; 0x0d
 2b4:	3f 83       	std	Y+7, r19	; 0x07
 2b6:	48 87       	std	Y+8, r20	; 0x08
 2b8:	59 87       	std	Y+9, r21	; 0x09
 2ba:	6a 87       	std	Y+10, r22	; 0x0a
 2bc:	7b 87       	std	Y+11, r23	; 0x0b
 2be:	8e 87       	std	Y+14, r24	; 0x0e
 2c0:	9c 87       	std	Y+12, r25	; 0x0c
 2c2:	a2 2e       	mov	r10, r18
 2c4:	b3 2e       	mov	r11, r19
 2c6:	c4 2e       	mov	r12, r20
 2c8:	d5 2e       	mov	r13, r21
 2ca:	e6 2e       	mov	r14, r22
 2cc:	f7 2e       	mov	r15, r23
 2ce:	08 2f       	mov	r16, r24
 2d0:	19 2f       	mov	r17, r25
 2d2:	29 81       	ldd	r18, Y+1	; 0x01
 2d4:	3a 81       	ldd	r19, Y+2	; 0x02
 2d6:	4b 81       	ldd	r20, Y+3	; 0x03
 2d8:	5c 81       	ldd	r21, Y+4	; 0x04
 2da:	6d 81       	ldd	r22, Y+5	; 0x05
 2dc:	7e 81       	ldd	r23, Y+6	; 0x06
 2de:	83 2d       	mov	r24, r3
 2e0:	92 2d       	mov	r25, r2
 2e2:	0e 94 bb 08 	call	0x1176	; 0x1176 <__udivdi3>
 2e6:	80 e3       	ldi	r24, 0x30	; 48
 2e8:	82 0f       	add	r24, r18
 2ea:	0e 94 94 06 	call	0xd28	; 0xd28 <LCD_WriteCHAR>
 2ee:	08 89       	ldd	r16, Y+16	; 0x10
 2f0:	1f 85       	ldd	r17, Y+15	; 0x0f
 2f2:	29 81       	ldd	r18, Y+1	; 0x01
 2f4:	3a 81       	ldd	r19, Y+2	; 0x02
 2f6:	4b 81       	ldd	r20, Y+3	; 0x03
 2f8:	5c 81       	ldd	r21, Y+4	; 0x04
 2fa:	6d 81       	ldd	r22, Y+5	; 0x05
 2fc:	7e 81       	ldd	r23, Y+6	; 0x06
 2fe:	83 2d       	mov	r24, r3
 300:	92 2d       	mov	r25, r2
 302:	0e 94 b9 08 	call	0x1172	; 0x1172 <__umoddi3>
 306:	29 83       	std	Y+1, r18	; 0x01
 308:	3a 83       	std	Y+2, r19	; 0x02
 30a:	4b 83       	std	Y+3, r20	; 0x03
 30c:	5c 83       	std	Y+4, r21	; 0x04
 30e:	6d 83       	std	Y+5, r22	; 0x05
 310:	7e 83       	std	Y+6, r23	; 0x06
 312:	38 2e       	mov	r3, r24
 314:	29 2e       	mov	r2, r25
 316:	24 2d       	mov	r18, r4
 318:	35 2d       	mov	r19, r5
 31a:	46 2d       	mov	r20, r6
 31c:	57 2d       	mov	r21, r7
 31e:	68 2d       	mov	r22, r8
 320:	79 2d       	mov	r23, r9
 322:	80 2f       	mov	r24, r16
 324:	91 2f       	mov	r25, r17
 326:	a1 e0       	ldi	r26, 0x01	; 1
 328:	0e 94 c7 08 	call	0x118e	; 0x118e <__cmpdi2_s8>
 32c:	09 f0       	breq	.+2      	; 0x330 <LCD_WriteNUM+0x220>
 32e:	a4 cf       	rjmp	.-184    	; 0x278 <LCD_WriteNUM+0x168>
 330:	60 96       	adiw	r28, 0x10	; 16
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	f8 94       	cli
 336:	de bf       	out	0x3e, r29	; 62
 338:	0f be       	out	0x3f, r0	; 63
 33a:	cd bf       	out	0x3d, r28	; 61
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	ff 90       	pop	r15
 346:	ef 90       	pop	r14
 348:	df 90       	pop	r13
 34a:	cf 90       	pop	r12
 34c:	bf 90       	pop	r11
 34e:	af 90       	pop	r10
 350:	9f 90       	pop	r9
 352:	8f 90       	pop	r8
 354:	7f 90       	pop	r7
 356:	6f 90       	pop	r6
 358:	5f 90       	pop	r5
 35a:	4f 90       	pop	r4
 35c:	3f 90       	pop	r3
 35e:	2f 90       	pop	r2
 360:	08 95       	ret

Disassembly of section .text.normal:

00000eae <normal>:
															     
																

															/****Normal mode function****/
void normal(Uint8 temp )
{
 eae:	cf 93       	push	r28
 eb0:	c8 2f       	mov	r28, r24
		f=0;
 eb2:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <f>
															/****turn on leds****/
															
	DIO_SetPinVal(DIO_PORTC,PIN7,HIGH_PIN);
 eb6:	41 e0       	ldi	r20, 0x01	; 1
 eb8:	67 e0       	ldi	r22, 0x07	; 7
 eba:	82 e0       	ldi	r24, 0x02	; 2
 ebc:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
	DIO_SetPinVal(DIO_PORTC,PIN2,HIGH_PIN);
 ec0:	41 e0       	ldi	r20, 0x01	; 1
 ec2:	62 e0       	ldi	r22, 0x02	; 2
 ec4:	82 e0       	ldi	r24, 0x02	; 2
 ec6:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
	DIO_SetPinVal(DIO_PORTD,PIN3,HIGH_PIN);
 eca:	41 e0       	ldi	r20, 0x01	; 1
 ecc:	63 e0       	ldi	r22, 0x03	; 3
 ece:	83 e0       	ldi	r24, 0x03	; 3
 ed0:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
															/****LCD****/
	LCD_Clear();
 ed4:	0e 94 02 09 	call	0x1204	; 0x1204 <LCD_Clear>
	LCD_GoTo(0,0);
 ed8:	60 e0       	ldi	r22, 0x00	; 0
 eda:	80 e0       	ldi	r24, 0x00	; 0
 edc:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_GoTo>
	LCD_WriteSTRING("Normal") ;
 ee0:	64 eb       	ldi	r22, 0xB4	; 180
 ee2:	70 e0       	ldi	r23, 0x00	; 0
 ee4:	80 e0       	ldi	r24, 0x00	; 0
 ee6:	0e 94 34 08 	call	0x1068	; 0x1068 <LCD_WriteSTRING>
	LCD_GoTo(1,0);
 eea:	60 e0       	ldi	r22, 0x00	; 0
 eec:	81 e0       	ldi	r24, 0x01	; 1
 eee:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_GoTo>
	LCD_WriteSTRING("temperature= ") ;
 ef2:	6b eb       	ldi	r22, 0xBB	; 187
 ef4:	70 e0       	ldi	r23, 0x00	; 0
 ef6:	80 e0       	ldi	r24, 0x00	; 0
 ef8:	0e 94 34 08 	call	0x1068	; 0x1068 <LCD_WriteSTRING>
	LCD_WriteNUM(temp) ;
 efc:	2c 2f       	mov	r18, r28
 efe:	30 e0       	ldi	r19, 0x00	; 0
 f00:	40 e0       	ldi	r20, 0x00	; 0
 f02:	50 e0       	ldi	r21, 0x00	; 0
 f04:	60 e0       	ldi	r22, 0x00	; 0
 f06:	70 e0       	ldi	r23, 0x00	; 0
 f08:	80 e0       	ldi	r24, 0x00	; 0
 f0a:	90 e0       	ldi	r25, 0x00	; 0
 f0c:	0e 94 88 00 	call	0x110	; 0x110 <LCD_WriteNUM>
 f10:	2f e3       	ldi	r18, 0x3F	; 63
 f12:	87 e7       	ldi	r24, 0x77	; 119
 f14:	9b e1       	ldi	r25, 0x1B	; 27
 f16:	21 50       	subi	r18, 0x01	; 1
 f18:	80 40       	sbci	r24, 0x00	; 0
 f1a:	90 40       	sbci	r25, 0x00	; 0
 f1c:	e1 f7       	brne	.-8      	; 0xf16 <normal+0x68>
 f1e:	00 c0       	rjmp	.+0      	; 0xf20 <normal+0x72>
 f20:	00 00       	nop
	_delay_ms(9000);
}
 f22:	cf 91       	pop	r28
 f24:	08 95       	ret

Disassembly of section .text.Hot:

00000b74 <Hot>:

															/****Hot mode function****/

void Hot (Uint8 temp)
{
 b74:	cf 93       	push	r28
 b76:	c8 2f       	mov	r28, r24
	
	
	f=0;
 b78:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <f>
																/****leds****/

	DIO_SetPinVal(DIO_PORTC,PIN7,LOW_PIN);              //turn off normal mode led
 b7c:	40 e0       	ldi	r20, 0x00	; 0
 b7e:	67 e0       	ldi	r22, 0x07	; 7
 b80:	82 e0       	ldi	r24, 0x02	; 2
 b82:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
	DIO_SetPinVal(DIO_PORTC,PIN2,HIGH_PIN);             //turn on hot mode led
 b86:	41 e0       	ldi	r20, 0x01	; 1
 b88:	62 e0       	ldi	r22, 0x02	; 2
 b8a:	82 e0       	ldi	r24, 0x02	; 2
 b8c:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
	DIO_SetPinVal(DIO_PORTD,PIN3,LOW_PIN);              //turn off fire mode led
 b90:	40 e0       	ldi	r20, 0x00	; 0
 b92:	63 e0       	ldi	r22, 0x03	; 3
 b94:	83 e0       	ldi	r24, 0x03	; 3
 b96:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
	
																/****buzzer for 5 sec****/

	DIO_SetPinVal(DIO_PORTA,PIN3,HIGH_PIN);				
 b9a:	41 e0       	ldi	r20, 0x01	; 1
 b9c:	63 e0       	ldi	r22, 0x03	; 3
 b9e:	80 e0       	ldi	r24, 0x00	; 0
 ba0:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
 ba4:	2f e9       	ldi	r18, 0x9F	; 159
 ba6:	86 e8       	ldi	r24, 0x86	; 134
 ba8:	91 e0       	ldi	r25, 0x01	; 1
 baa:	21 50       	subi	r18, 0x01	; 1
 bac:	80 40       	sbci	r24, 0x00	; 0
 bae:	90 40       	sbci	r25, 0x00	; 0
 bb0:	e1 f7       	brne	.-8      	; 0xbaa <Hot+0x36>
 bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <Hot+0x40>
 bb4:	00 00       	nop
	_delay_ms(500);                                     
	DIO_SetPinVal(DIO_PORTA,PIN3,LOW_PIN);             
 bb6:	40 e0       	ldi	r20, 0x00	; 0
 bb8:	63 e0       	ldi	r22, 0x03	; 3
 bba:	80 e0       	ldi	r24, 0x00	; 0
 bbc:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
													
												            	/****LCD****/
	LCD_Clear();
 bc0:	0e 94 02 09 	call	0x1204	; 0x1204 <LCD_Clear>
	LCD_GoTo(0,0);
 bc4:	60 e0       	ldi	r22, 0x00	; 0
 bc6:	80 e0       	ldi	r24, 0x00	; 0
 bc8:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_GoTo>
	LCD_WriteSTRING("Hot") ;
 bcc:	69 ec       	ldi	r22, 0xC9	; 201
 bce:	70 e0       	ldi	r23, 0x00	; 0
 bd0:	80 e0       	ldi	r24, 0x00	; 0
 bd2:	0e 94 34 08 	call	0x1068	; 0x1068 <LCD_WriteSTRING>
	LCD_GoTo(1,0);
 bd6:	60 e0       	ldi	r22, 0x00	; 0
 bd8:	81 e0       	ldi	r24, 0x01	; 1
 bda:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_GoTo>
	LCD_WriteSTRING("temperature= ") ;
 bde:	6b eb       	ldi	r22, 0xBB	; 187
 be0:	70 e0       	ldi	r23, 0x00	; 0
 be2:	80 e0       	ldi	r24, 0x00	; 0
 be4:	0e 94 34 08 	call	0x1068	; 0x1068 <LCD_WriteSTRING>
	LCD_WriteNUM(temp) ;
 be8:	2c 2f       	mov	r18, r28
 bea:	30 e0       	ldi	r19, 0x00	; 0
 bec:	40 e0       	ldi	r20, 0x00	; 0
 bee:	50 e0       	ldi	r21, 0x00	; 0
 bf0:	60 e0       	ldi	r22, 0x00	; 0
 bf2:	70 e0       	ldi	r23, 0x00	; 0
 bf4:	80 e0       	ldi	r24, 0x00	; 0
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	0e 94 88 00 	call	0x110	; 0x110 <LCD_WriteNUM>
 bfc:	2f e3       	ldi	r18, 0x3F	; 63
 bfe:	87 e7       	ldi	r24, 0x77	; 119
 c00:	9b e1       	ldi	r25, 0x1B	; 27
 c02:	21 50       	subi	r18, 0x01	; 1
 c04:	80 40       	sbci	r24, 0x00	; 0
 c06:	90 40       	sbci	r25, 0x00	; 0
 c08:	e1 f7       	brne	.-8      	; 0xc02 <Hot+0x8e>
 c0a:	00 c0       	rjmp	.+0      	; 0xc0c <Hot+0x98>
 c0c:	00 00       	nop
	_delay_ms(9000);
}
 c0e:	cf 91       	pop	r28
 c10:	08 95       	ret

Disassembly of section .text.pass_succ:

00000c12 <pass_succ>:
}
															/****turn off buzzer and normal mode function****/

void pass_succ (Uint8 temp)
{
	
 c12:	cf 93       	push	r28
 c14:	c8 2f       	mov	r28, r24
																/****turn on leds****/

		DIO_SetPinVal(DIO_PORTC,PIN7,HIGH_PIN);
		DIO_SetPinVal(DIO_PORTC,PIN2,HIGH_PIN);
 c16:	41 e0       	ldi	r20, 0x01	; 1
 c18:	67 e0       	ldi	r22, 0x07	; 7
 c1a:	82 e0       	ldi	r24, 0x02	; 2
 c1c:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
		DIO_SetPinVal(DIO_PORTD,PIN3,HIGH_PIN);
 c20:	41 e0       	ldi	r20, 0x01	; 1
 c22:	62 e0       	ldi	r22, 0x02	; 2
 c24:	82 e0       	ldi	r24, 0x02	; 2
 c26:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
		
 c2a:	41 e0       	ldi	r20, 0x01	; 1
 c2c:	63 e0       	ldi	r22, 0x03	; 3
 c2e:	83 e0       	ldi	r24, 0x03	; 3
 c30:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
		CLEAR_BIT(PORTA,3);                            // turn off buzzer
				
 c34:	8b b3       	in	r24, 0x1b	; 27
 c36:	87 7f       	andi	r24, 0xF7	; 247
 c38:	8b bb       	out	0x1b, r24	; 27
															  	/****LCD****/

	LCD_Clear();
	LCD_GoTo(0,0);
 c3a:	0e 94 02 09 	call	0x1204	; 0x1204 <LCD_Clear>
	LCD_WriteSTRING("NORMAL ") ;
 c3e:	60 e0       	ldi	r22, 0x00	; 0
 c40:	80 e0       	ldi	r24, 0x00	; 0
 c42:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_GoTo>
	LCD_GoTo(1,0);
 c46:	6d ec       	ldi	r22, 0xCD	; 205
 c48:	70 e0       	ldi	r23, 0x00	; 0
 c4a:	80 e0       	ldi	r24, 0x00	; 0
 c4c:	0e 94 34 08 	call	0x1068	; 0x1068 <LCD_WriteSTRING>
	LCD_WriteSTRING("temperature= ") ;
 c50:	60 e0       	ldi	r22, 0x00	; 0
 c52:	81 e0       	ldi	r24, 0x01	; 1
 c54:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_GoTo>
	LCD_WriteNUM(temp) ;
 c58:	6b eb       	ldi	r22, 0xBB	; 187
 c5a:	70 e0       	ldi	r23, 0x00	; 0
 c5c:	80 e0       	ldi	r24, 0x00	; 0
 c5e:	0e 94 34 08 	call	0x1068	; 0x1068 <LCD_WriteSTRING>
	_delay_ms(4000);
 c62:	2c 2f       	mov	r18, r28
 c64:	30 e0       	ldi	r19, 0x00	; 0
 c66:	40 e0       	ldi	r20, 0x00	; 0
 c68:	50 e0       	ldi	r21, 0x00	; 0
 c6a:	60 e0       	ldi	r22, 0x00	; 0
 c6c:	70 e0       	ldi	r23, 0x00	; 0
 c6e:	80 e0       	ldi	r24, 0x00	; 0
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	0e 94 88 00 	call	0x110	; 0x110 <LCD_WriteNUM>
 c76:	2f ef       	ldi	r18, 0xFF	; 255
 c78:	84 e3       	ldi	r24, 0x34	; 52
 c7a:	9c e0       	ldi	r25, 0x0C	; 12
 c7c:	21 50       	subi	r18, 0x01	; 1
 c7e:	80 40       	sbci	r24, 0x00	; 0
 c80:	90 40       	sbci	r25, 0x00	; 0
 c82:	e1 f7       	brne	.-8      	; 0xc7c <pass_succ+0x6a>
 c84:	00 c0       	rjmp	.+0      	; 0xc86 <pass_succ+0x74>
 c86:	00 00       	nop
	PORTC = 0x03; 	                                         //Stops Motor
	_delay_ms(9000);
 c88:	83 e0       	ldi	r24, 0x03	; 3
 c8a:	85 bb       	out	0x15, r24	; 21
 c8c:	2f e3       	ldi	r18, 0x3F	; 63
 c8e:	87 e7       	ldi	r24, 0x77	; 119
 c90:	9b e1       	ldi	r25, 0x1B	; 27
 c92:	21 50       	subi	r18, 0x01	; 1
 c94:	80 40       	sbci	r24, 0x00	; 0
 c96:	90 40       	sbci	r25, 0x00	; 0
 c98:	e1 f7       	brne	.-8      	; 0xc92 <pass_succ+0x80>
 c9a:	00 c0       	rjmp	.+0      	; 0xc9c <pass_succ+0x8a>
 c9c:	00 00       	nop

	
}

 c9e:	cf 91       	pop	r28
 ca0:	08 95       	ret

Disassembly of section .text.password:

00000362 <password>:
*/

                                                                    /****PASSWORD FUNTION****/

void password(){
	
 362:	0f 93       	push	r16
 364:	1f 93       	push	r17
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
	KeyPad_init();

 36a:	0e 94 93 07 	call	0xf26	; 0xf26 <KeyPad_init>
	Uint8 key,p1=1, p2=2, p3=3 ,p4=4;
	
	
	while (1) {
		LCD_Clear();
		LCD_GoTo(0,0);
 36e:	0e 94 02 09 	call	0x1204	; 0x1204 <LCD_Clear>
		LCD_WriteSTRING("ENTER PASSWARD:");
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_GoTo>
		LCD_GoTo(1,0);
 37a:	65 ed       	ldi	r22, 0xD5	; 213
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 34 08 	call	0x1068	; 0x1068 <LCD_WriteSTRING>
		/****fist case****/
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_GoTo>
		key=0;
		while(key==0){
 38c:	c0 e0       	ldi	r28, 0x00	; 0
			
 38e:	0c c0       	rjmp	.+24     	; 0x3a8 <password+0x46>
			key=KeyPad_GetKey();
			_delay_ms(3000);       //delay for keypad entering
 390:	0e 94 18 05 	call	0xa30	; 0xa30 <KeyPad_GetKey>
 394:	c8 2f       	mov	r28, r24
 396:	2f eb       	ldi	r18, 0xBF	; 191
 398:	87 e2       	ldi	r24, 0x27	; 39
 39a:	99 e0       	ldi	r25, 0x09	; 9
 39c:	21 50       	subi	r18, 0x01	; 1
 39e:	80 40       	sbci	r24, 0x00	; 0
 3a0:	90 40       	sbci	r25, 0x00	; 0
 3a2:	e1 f7       	brne	.-8      	; 0x39c <password+0x3a>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <password+0x44>
 3a6:	00 00       	nop
		LCD_WriteSTRING("ENTER PASSWARD:");
		LCD_GoTo(1,0);
		/****fist case****/
		key=0;
		while(key==0){
			
 3a8:	cc 23       	and	r28, r28
 3aa:	91 f3       	breq	.-28     	; 0x390 <password+0x2e>
			key=KeyPad_GetKey();
			_delay_ms(3000);       //delay for keypad entering
		}
		LCD_WriteCHAR('*');        //to make pass secure
		p1 = key ;
 3ac:	8a e2       	ldi	r24, 0x2A	; 42
 3ae:	0e 94 94 06 	call	0xd28	; 0xd28 <LCD_WriteCHAR>
 3b2:	89 ef       	ldi	r24, 0xF9	; 249
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <password+0x54>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <password+0x5a>
 3bc:	00 00       	nop
		_delay_ms(1);             //to take another char
		
		/****second case****/
		
		key=0;
		while(key==0){
 3be:	d0 e0       	ldi	r29, 0x00	; 0
			
 3c0:	0c c0       	rjmp	.+24     	; 0x3da <password+0x78>
			key=KeyPad_GetKey();
			_delay_ms(3000);          //delay for keypad entering
 3c2:	0e 94 18 05 	call	0xa30	; 0xa30 <KeyPad_GetKey>
 3c6:	d8 2f       	mov	r29, r24
 3c8:	9f eb       	ldi	r25, 0xBF	; 191
 3ca:	27 e2       	ldi	r18, 0x27	; 39
 3cc:	89 e0       	ldi	r24, 0x09	; 9
 3ce:	91 50       	subi	r25, 0x01	; 1
 3d0:	20 40       	sbci	r18, 0x00	; 0
 3d2:	80 40       	sbci	r24, 0x00	; 0
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <password+0x6c>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <password+0x76>
 3d8:	00 00       	nop
		
		/****second case****/
		
		key=0;
		while(key==0){
			
 3da:	dd 23       	and	r29, r29
 3dc:	91 f3       	breq	.-28     	; 0x3c2 <password+0x60>
			key=KeyPad_GetKey();
			_delay_ms(3000);          //delay for keypad entering
		}
		LCD_WriteCHAR('*');           //to make pass secure
		p2= key ;
 3de:	8a e2       	ldi	r24, 0x2A	; 42
 3e0:	0e 94 94 06 	call	0xd28	; 0xd28 <LCD_WriteCHAR>
 3e4:	89 ef       	ldi	r24, 0xF9	; 249
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <password+0x86>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <password+0x8c>
 3ee:	00 00       	nop
		_delay_ms(1);                 //to take another char
		
		/****second case****/
		
		key=0;
		while(key==0){
 3f0:	10 e0       	ldi	r17, 0x00	; 0
			
 3f2:	0c c0       	rjmp	.+24     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			key=KeyPad_GetKey();
			_delay_ms(3000);           //delay for keypad entering
 3f4:	0e 94 18 05 	call	0xa30	; 0xa30 <KeyPad_GetKey>
 3f8:	18 2f       	mov	r17, r24
 3fa:	9f eb       	ldi	r25, 0xBF	; 191
 3fc:	27 e2       	ldi	r18, 0x27	; 39
 3fe:	89 e0       	ldi	r24, 0x09	; 9
 400:	91 50       	subi	r25, 0x01	; 1
 402:	20 40       	sbci	r18, 0x00	; 0
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	e1 f7       	brne	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
		
		/****second case****/
		
		key=0;
		while(key==0){
			
 40c:	11 23       	and	r17, r17
 40e:	91 f3       	breq	.-28     	; 0x3f4 <password+0x92>
			key=KeyPad_GetKey();
			_delay_ms(3000);           //delay for keypad entering
		}
		LCD_WriteCHAR('*');            //to make pass secure
		p3= key ;
 410:	8a e2       	ldi	r24, 0x2A	; 42
 412:	0e 94 94 06 	call	0xd28	; 0xd28 <LCD_WriteCHAR>
 416:	89 ef       	ldi	r24, 0xF9	; 249
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 420:	00 00       	nop
		_delay_ms(1);                   //to take another char
		
		/****four case****/

		key=0;
		while(key==0){
 422:	00 e0       	ldi	r16, 0x00	; 0
			
 424:	0c c0       	rjmp	.+24     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			key=KeyPad_GetKey();
			_delay_ms(3000);            //delay for keypad entering
 426:	0e 94 18 05 	call	0xa30	; 0xa30 <KeyPad_GetKey>
 42a:	08 2f       	mov	r16, r24
 42c:	9f eb       	ldi	r25, 0xBF	; 191
 42e:	27 e2       	ldi	r18, 0x27	; 39
 430:	89 e0       	ldi	r24, 0x09	; 9
 432:	91 50       	subi	r25, 0x01	; 1
 434:	20 40       	sbci	r18, 0x00	; 0
 436:	80 40       	sbci	r24, 0x00	; 0
 438:	e1 f7       	brne	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
		
		/****four case****/

		key=0;
		while(key==0){
			
 43e:	00 23       	and	r16, r16
 440:	91 f3       	breq	.-28     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
			key=KeyPad_GetKey();
			_delay_ms(3000);            //delay for keypad entering
		}
		LCD_WriteCHAR('*');             //to make pass secure
		p4 = key ;
 442:	8a e2       	ldi	r24, 0x2A	; 42
 444:	0e 94 94 06 	call	0xd28	; 0xd28 <LCD_WriteCHAR>
 448:	89 ef       	ldi	r24, 0xF9	; 249
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 452:	00 00       	nop
		_delay_ms(1);                  //to take another char
		
		/****Check pass****/
		
		if(p1=='1' && p2=='2' &&  p3=='3' && p4=='4'){
			f =1;                            //to enable fire function with no buzz
 454:	c1 33       	cpi	r28, 0x31	; 49
 456:	19 f5       	brne	.+70     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 458:	d2 33       	cpi	r29, 0x32	; 50
 45a:	09 f5       	brne	.+66     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 45c:	13 33       	cpi	r17, 0x33	; 51
 45e:	f9 f4       	brne	.+62     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 460:	04 33       	cpi	r16, 0x34	; 52
 462:	e9 f4       	brne	.+58     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <f>
			/****LCD****/
			
			LCD_Clear();
			LCD_GoTo(1,0);
 46a:	0e 94 02 09 	call	0x1204	; 0x1204 <LCD_Clear>
			LCD_WriteSTRING("successful pass");
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_GoTo>
			_delay_ms(3000);
 476:	65 ee       	ldi	r22, 0xE5	; 229
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 34 08 	call	0x1068	; 0x1068 <LCD_WriteSTRING>
 480:	9f eb       	ldi	r25, 0xBF	; 191
 482:	27 e2       	ldi	r18, 0x27	; 39
 484:	89 e0       	ldi	r24, 0x09	; 9
 486:	91 50       	subi	r25, 0x01	; 1
 488:	20 40       	sbci	r18, 0x00	; 0
 48a:	80 40       	sbci	r24, 0x00	; 0
 48c:	e1 f7       	brne	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 490:	00 00       	nop
			
			CLEAR_BIT(PORTA,3);                   //stop buzz
			PORTC = 0x03;                         //Stops Motor
 492:	8b b3       	in	r24, 0x1b	; 27
 494:	87 7f       	andi	r24, 0xF7	; 247
 496:	8b bb       	out	0x1b, r24	; 27
			
 498:	83 e0       	ldi	r24, 0x03	; 3
 49a:	85 bb       	out	0x15, r24	; 21
			_delay_ms(6000);
			LCD_Clear();
		}
	}
}
 49c:	17 c0       	rjmp	.+46     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
			break;                                //to go out from while 1
		}
		/****Wrong pass****/
		else{
			LCD_Clear();
			LCD_GoTo(1,0);
 49e:	0e 94 02 09 	call	0x1204	; 0x1204 <LCD_Clear>
			LCD_WriteSTRING("     Wrong pass");
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_GoTo>
			_delay_ms(6000);
 4aa:	65 ef       	ldi	r22, 0xF5	; 245
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	0e 94 34 08 	call	0x1068	; 0x1068 <LCD_WriteSTRING>
 4b4:	9f e7       	ldi	r25, 0x7F	; 127
 4b6:	2f e4       	ldi	r18, 0x4F	; 79
 4b8:	82 e1       	ldi	r24, 0x12	; 18
 4ba:	91 50       	subi	r25, 0x01	; 1
 4bc:	20 40       	sbci	r18, 0x00	; 0
 4be:	80 40       	sbci	r24, 0x00	; 0
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c4:	00 00       	nop
			LCD_Clear();
		}
 4c6:	0e 94 02 09 	call	0x1204	; 0x1204 <LCD_Clear>
	}
}
 4ca:	51 cf       	rjmp	.-350    	; 0x36e <password+0xc>
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	1f 91       	pop	r17
 4d2:	0f 91       	pop	r16
 4d4:	08 95       	ret

Disassembly of section .text.Fire_WITHBUZ:

00000dae <Fire_WITHBUZ>:
}

																/****fire mode alarm function****/
																
void Fire_WITHBUZ (Uint8 temp)
{
 dae:	cf 93       	push	r28
 db0:	c8 2f       	mov	r28, r24
																	     /****leds****/
																		
		DIO_SetPinVal(DIO_PORTC,PIN7,LOW_PIN);              //turn off normal mode led
 db2:	40 e0       	ldi	r20, 0x00	; 0
 db4:	67 e0       	ldi	r22, 0x07	; 7
 db6:	82 e0       	ldi	r24, 0x02	; 2
 db8:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
		DIO_SetPinVal(DIO_PORTC,PIN2,LOW_PIN);             //turn off hot mode led
 dbc:	40 e0       	ldi	r20, 0x00	; 0
 dbe:	62 e0       	ldi	r22, 0x02	; 2
 dc0:	82 e0       	ldi	r24, 0x02	; 2
 dc2:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>
		DIO_SetPinVal(DIO_PORTD,PIN3,HIGH_PIN);           //turn on fire mode led
 dc6:	41 e0       	ldi	r20, 0x01	; 1
 dc8:	63 e0       	ldi	r22, 0x03	; 3
 dca:	83 e0       	ldi	r24, 0x03	; 3
 dcc:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_SetPinVal>

												                    	/****LCD****/

		LCD_Clear();
 dd0:	0e 94 02 09 	call	0x1204	; 0x1204 <LCD_Clear>
		LCD_GoTo(0,0);
 dd4:	60 e0       	ldi	r22, 0x00	; 0
 dd6:	80 e0       	ldi	r24, 0x00	; 0
 dd8:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_GoTo>
		LCD_WriteSTRING("MODE= Fire") ;
 ddc:	65 e0       	ldi	r22, 0x05	; 5
 dde:	71 e0       	ldi	r23, 0x01	; 1
 de0:	80 e0       	ldi	r24, 0x00	; 0
 de2:	0e 94 34 08 	call	0x1068	; 0x1068 <LCD_WriteSTRING>
		LCD_GoTo(1,0);
 de6:	60 e0       	ldi	r22, 0x00	; 0
 de8:	81 e0       	ldi	r24, 0x01	; 1
 dea:	0e 94 68 08 	call	0x10d0	; 0x10d0 <LCD_GoTo>
		LCD_WriteSTRING("temperature= ") ;
 dee:	6b eb       	ldi	r22, 0xBB	; 187
 df0:	70 e0       	ldi	r23, 0x00	; 0
 df2:	80 e0       	ldi	r24, 0x00	; 0
 df4:	0e 94 34 08 	call	0x1068	; 0x1068 <LCD_WriteSTRING>
		LCD_WriteNUM(temp) ;
 df8:	2c 2f       	mov	r18, r28
 dfa:	30 e0       	ldi	r19, 0x00	; 0
 dfc:	40 e0       	ldi	r20, 0x00	; 0
 dfe:	50 e0       	ldi	r21, 0x00	; 0
 e00:	60 e0       	ldi	r22, 0x00	; 0
 e02:	70 e0       	ldi	r23, 0x00	; 0
 e04:	80 e0       	ldi	r24, 0x00	; 0
 e06:	90 e0       	ldi	r25, 0x00	; 0
 e08:	0e 94 88 00 	call	0x110	; 0x110 <LCD_WriteNUM>
		 
		PORTC = 0x02; //Rotates Motor in Clockwise
 e0c:	82 e0       	ldi	r24, 0x02	; 2
 e0e:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTA,3); //buzzer turn on
 e10:	8b b3       	in	r24, 0x1b	; 27
 e12:	88 60       	ori	r24, 0x08	; 8
 e14:	8b bb       	out	0x1b, r24	; 27
 e16:	2f e7       	ldi	r18, 0x7F	; 127
 e18:	86 e9       	ldi	r24, 0x96	; 150
 e1a:	98 e9       	ldi	r25, 0x98	; 152
 e1c:	21 50       	subi	r18, 0x01	; 1
 e1e:	80 40       	sbci	r24, 0x00	; 0
 e20:	90 40       	sbci	r25, 0x00	; 0
 e22:	e1 f7       	brne	.-8      	; 0xe1c <Fire_WITHBUZ+0x6e>
 e24:	00 c0       	rjmp	.+0      	; 0xe26 <Fire_WITHBUZ+0x78>
 e26:	00 00       	nop
		_delay_ms(50000);
		
		LCD_Clear();
 e28:	0e 94 02 09 	call	0x1204	; 0x1204 <LCD_Clear>
			password();	    // calling password function
 e2c:	0e 94 b1 01 	call	0x362	; 0x362 <password>
		
}
 e30:	cf 91       	pop	r28
 e32:	08 95       	ret

Disassembly of section .text.main:

00000972 <main>:

int main ()
{
	extern Uint8 f;
	
	LCD_init();    // LCD initialization
 972:	0e 94 56 04 	call	0x8ac	; 0x8ac <LCD_init>
	ADC_INIT();    // Calling ADC initialization function
 976:	0e 94 15 08 	call	0x102a	; 0x102a <ADC_INIT>
	
	                              //extnarnal hardware initialization*/
	
	DIO_SetPinDir(PORTA,PIN3,OUTPUT_PIN); //buzzer
 97a:	8b b3       	in	r24, 0x1b	; 27
 97c:	41 e0       	ldi	r20, 0x01	; 1
 97e:	63 e0       	ldi	r22, 0x03	; 3
 980:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_SetPinDir>
	DDRC = 0xFF;                         //PORTc as Output for motor
 984:	8f ef       	ldi	r24, 0xFF	; 255
 986:	84 bb       	out	0x14, r24	; 20
	
	                                                    /****LED initialization****/
	DIO_SetPinDir(DIO_PORTD,PIN3,OUTPUT_PIN);
 988:	41 e0       	ldi	r20, 0x01	; 1
 98a:	63 e0       	ldi	r22, 0x03	; 3
 98c:	83 e0       	ldi	r24, 0x03	; 3
 98e:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTC,PIN7,OUTPUT_PIN);
 992:	41 e0       	ldi	r20, 0x01	; 1
 994:	67 e0       	ldi	r22, 0x07	; 7
 996:	82 e0       	ldi	r24, 0x02	; 2
 998:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTC,PIN2,OUTPUT_PIN);
 99c:	41 e0       	ldi	r20, 0x01	; 1
 99e:	62 e0       	ldi	r22, 0x02	; 2
 9a0:	82 e0       	ldi	r24, 0x02	; 2
 9a2:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTA,PIN3,OUTPUT_PIN);
 9a6:	41 e0       	ldi	r20, 0x01	; 1
 9a8:	63 e0       	ldi	r22, 0x03	; 3
 9aa:	80 e0       	ldi	r24, 0x00	; 0
 9ac:	0e 94 05 03 	call	0x60a	; 0x60a <DIO_SetPinDir>
	
	while(1){
		
															/** convert volt to temperature **/
															
		volt=((ADC_Read(ADC1))*10);
 9b0:	81 e0       	ldi	r24, 0x01	; 1
 9b2:	0e 94 80 08 	call	0x1100	; 0x1100 <ADC_Read>
 9b6:	bc 01       	movw	r22, r24
 9b8:	66 0f       	add	r22, r22
 9ba:	77 1f       	adc	r23, r23
 9bc:	88 0f       	add	r24, r24
 9be:	99 1f       	adc	r25, r25
 9c0:	88 0f       	add	r24, r24
 9c2:	99 1f       	adc	r25, r25
 9c4:	88 0f       	add	r24, r24
 9c6:	99 1f       	adc	r25, r25
 9c8:	68 0f       	add	r22, r24
 9ca:	79 1f       	adc	r23, r25
 9cc:	80 e0       	ldi	r24, 0x00	; 0
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 94 1a 07 	call	0xe34	; 0xe34 <__floatunsisf>
		_temperature =(volt)/(1020/10);
 9d4:	20 e0       	ldi	r18, 0x00	; 0
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	4c ec       	ldi	r20, 0xCC	; 204
 9da:	52 e4       	ldi	r21, 0x42	; 66
 9dc:	0e 94 06 09 	call	0x120c	; 0x120c <__divsf3>
		temperature=(Uint8)_temperature;           //casting
 9e0:	0e 94 c4 07 	call	0xf88	; 0xf88 <__fixunssfsi>
 9e4:	26 2f       	mov	r18, r22
 9e6:	30 e0       	ldi	r19, 0x00	; 0
		
		/** temperature conditions **/
		if ( temperature < 30 ){
 9e8:	2e 31       	cpi	r18, 0x1E	; 30
 9ea:	31 05       	cpc	r19, r1
 9ec:	24 f4       	brge	.+8      	; 0x9f6 <main+0x84>
		normal( temperature);
 9ee:	86 2f       	mov	r24, r22
 9f0:	0e 94 57 07 	call	0xeae	; 0xeae <normal>
 9f4:	dd cf       	rjmp	.-70     	; 0x9b0 <main+0x3e>

		}
		else if ('70 <= temperature >= 85'&& temperature<95)
 9f6:	2f 35       	cpi	r18, 0x5F	; 95
 9f8:	31 05       	cpc	r19, r1
 9fa:	24 f4       	brge	.+8      	; 0xa04 <main+0x92>
		{
			Hot( temperature);
 9fc:	86 2f       	mov	r24, r22
 9fe:	0e 94 ba 05 	call	0xb74	; 0xb74 <Hot>
 a02:	d6 cf       	rjmp	.-84     	; 0x9b0 <main+0x3e>
		}

		else if (temperature >=95 && f==0){
 a04:	2f 35       	cpi	r18, 0x5F	; 95
 a06:	31 05       	cpc	r19, r1
 a08:	44 f0       	brlt	.+16     	; 0xa1a <main+0xa8>
 a0a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <f>
 a0e:	81 11       	cpse	r24, r1
 a10:	04 c0       	rjmp	.+8      	; 0xa1a <main+0xa8>
			Fire_WITHBUZ ( temperature);
 a12:	c9 01       	movw	r24, r18
 a14:	0e 94 d7 06 	call	0xdae	; 0xdae <Fire_WITHBUZ>
		else if ('70 <= temperature >= 85'&& temperature<95)
		{
			Hot( temperature);
		}

		else if (temperature >=95 && f==0){
 a18:	cb cf       	rjmp	.-106    	; 0x9b0 <main+0x3e>
			Fire_WITHBUZ ( temperature);
			
		}
		else if (temperature >=95 && f==1){
 a1a:	2f 35       	cpi	r18, 0x5F	; 95
 a1c:	31 05       	cpc	r19, r1
 a1e:	44 f2       	brlt	.-112    	; 0x9b0 <main+0x3e>
 a20:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <f>
 a24:	81 30       	cpi	r24, 0x01	; 1
 a26:	21 f6       	brne	.-120    	; 0x9b0 <main+0x3e>
			pass_succ ( temperature);
 a28:	c9 01       	movw	r24, r18
 a2a:	0e 94 09 06 	call	0xc12	; 0xc12 <pass_succ>
 a2e:	c0 cf       	rjmp	.-128    	; 0x9b0 <main+0x3e>

Disassembly of section .text.ADC_INIT:

0000102a <ADC_INIT>:
	
#if VOLTAGE_REFERENCE == AREF      //0-5v
CLEAR_BIT(ADMUX,REFS0);
CLEAR_BIT(ADMUX,REFS1);
#elif  VOLTAGE_REFERENCE == AVCC    //0-2.5
 SET_BIT(ADMUX,REFS0);
    102a:	87 b1       	in	r24, 0x07	; 7
    102c:	80 64       	ori	r24, 0x40	; 64
    102e:	87 b9       	out	0x07, r24	; 7
 CLEAR_BIT(ADMUX,REFS1);
    1030:	87 b1       	in	r24, 0x07	; 7
    1032:	8f 77       	andi	r24, 0x7F	; 127
    1034:	87 b9       	out	0x07, r24	; 7
#endif  

  
 
  	/*Right ADJUST*/
  	CLEAR_BIT(ADMUX, ADLAR);
    1036:	87 b1       	in	r24, 0x07	; 7
    1038:	8f 7d       	andi	r24, 0xDF	; 223
    103a:	87 b9       	out	0x07, r24	; 7
  	/*128 Pres caller*/
  SET_BIT(ADCSRA,ADPS0);
    103c:	86 b1       	in	r24, 0x06	; 6
    103e:	81 60       	ori	r24, 0x01	; 1
    1040:	86 b9       	out	0x06, r24	; 6
  SET_BIT(ADCSRA,ADPS1);
    1042:	86 b1       	in	r24, 0x06	; 6
    1044:	82 60       	ori	r24, 0x02	; 2
    1046:	86 b9       	out	0x06, r24	; 6
  SET_BIT(ADCSRA,ADPS2);
    1048:	86 b1       	in	r24, 0x06	; 6
    104a:	84 60       	ori	r24, 0x04	; 4
    104c:	86 b9       	out	0x06, r24	; 6
	/*Conversion Mode: AutoTrigger/FreeRunning*/
  	SET_BIT(ADCSRA, ADATE);
    104e:	86 b1       	in	r24, 0x06	; 6
    1050:	80 62       	ori	r24, 0x20	; 32
    1052:	86 b9       	out	0x06, r24	; 6
  	SFIOR = (AUTO_TRIGGER_MODE << 5)| (SFIOR & 0x0F);
    1054:	80 b7       	in	r24, 0x30	; 48
    1056:	91 b7       	in	r25, 0x31	; 49
    1058:	8f 70       	andi	r24, 0x0F	; 15
    105a:	99 27       	eor	r25, r25
    105c:	91 bf       	out	0x31, r25	; 49
    105e:	80 bf       	out	0x30, r24	; 48
  	/*ADC peripheral Enable*/
  	SET_BIT(ADCSRA,ADEN);
    1060:	86 b1       	in	r24, 0x06	; 6
    1062:	80 68       	ori	r24, 0x80	; 128
    1064:	86 b9       	out	0x06, r24	; 6
    1066:	08 95       	ret

Disassembly of section .text.ADC_Read:

00001100 <ADC_Read>:


Uint16 ADC_Read(Uint8 ADC_CHANNEL)
{
	/*Channel select*/ 
	CLEAR_BIT(DDRA,ADC_CHANNEL);
    1100:	9a b3       	in	r25, 0x1a	; 26
    1102:	21 e0       	ldi	r18, 0x01	; 1
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	08 2e       	mov	r0, r24
    1108:	02 c0       	rjmp	.+4      	; 0x110e <ADC_Read+0xe>
    110a:	22 0f       	add	r18, r18
    110c:	33 1f       	adc	r19, r19
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <ADC_Read+0xa>
    1112:	20 95       	com	r18
    1114:	29 23       	and	r18, r25
    1116:	2a bb       	out	0x1a, r18	; 26
	
	ADMUX = ADC_CHANNEL | (ADMUX & 0xE0);  
    1118:	97 b1       	in	r25, 0x07	; 7
    111a:	90 7e       	andi	r25, 0xE0	; 224
    111c:	89 2b       	or	r24, r25
    111e:	87 b9       	out	0x07, r24	; 7
	/*Start of conversion*/					
	SET_BIT(ADCSRA, ADSC);							
    1120:	86 b1       	in	r24, 0x06	; 6
    1122:	80 64       	ori	r24, 0x40	; 64
    1124:	86 b9       	out	0x06, r24	; 6
	/*End of conversion Polling*/
	while(IS_LOW(ADCSRA, ADIF));
    1126:	34 9b       	sbis	0x06, 4	; 6
    1128:	fe cf       	rjmp	.-4      	; 0x1126 <ADC_Read+0x26>
	/*Converted digital output*/
	return ADC_REG;
    112a:	84 b1       	in	r24, 0x04	; 4
    112c:	95 b1       	in	r25, 0x05	; 5
    112e:	08 95       	ret

Disassembly of section .text.DIO_SetPinDir:

0000060a <DIO_SetPinDir>:
*/
#include "DIO_interface.h"

void DIO_SetPinDir(PORT_TYPE port, PIN_TYPE pin, DIR_TYPE dir)
{
	switch (dir)
 60a:	44 23       	and	r20, r20
 60c:	19 f0       	breq	.+6      	; 0x614 <DIO_SetPinDir+0xa>
 60e:	41 30       	cpi	r20, 0x01	; 1
 610:	c9 f1       	breq	.+114    	; 0x684 <DIO_SetPinDir+0x7a>
 612:	08 95       	ret
	{
		case INPUT_PIN:
		
		switch (port)
 614:	81 30       	cpi	r24, 0x01	; 1
 616:	91 f0       	breq	.+36     	; 0x63c <DIO_SetPinDir+0x32>
 618:	28 f0       	brcs	.+10     	; 0x624 <DIO_SetPinDir+0x1a>
 61a:	82 30       	cpi	r24, 0x02	; 2
 61c:	d9 f0       	breq	.+54     	; 0x654 <DIO_SetPinDir+0x4a>
 61e:	83 30       	cpi	r24, 0x03	; 3
 620:	29 f1       	breq	.+74     	; 0x66c <DIO_SetPinDir+0x62>
 622:	08 95       	ret
		{
			case DIO_PORTA:
			CLEAR_BIT( DDRA, pin);
 624:	2a b3       	in	r18, 0x1a	; 26
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_SetPinDir+0x26>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	6a 95       	dec	r22
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_SetPinDir+0x22>
 634:	80 95       	com	r24
 636:	82 23       	and	r24, r18
 638:	8a bb       	out	0x1a, r24	; 26
			break;
 63a:	08 95       	ret
			case DIO_PORTB:
			CLEAR_BIT( DDRB, pin);
 63c:	27 b3       	in	r18, 0x17	; 23
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 c0       	rjmp	.+4      	; 0x648 <DIO_SetPinDir+0x3e>
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	6a 95       	dec	r22
 64a:	e2 f7       	brpl	.-8      	; 0x644 <DIO_SetPinDir+0x3a>
 64c:	80 95       	com	r24
 64e:	82 23       	and	r24, r18
 650:	87 bb       	out	0x17, r24	; 23
			break;
 652:	08 95       	ret
			case DIO_PORTC:
			CLEAR_BIT( DDRC, pin);
 654:	24 b3       	in	r18, 0x14	; 20
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_SetPinDir+0x56>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	6a 95       	dec	r22
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_SetPinDir+0x52>
 664:	80 95       	com	r24
 666:	82 23       	and	r24, r18
 668:	84 bb       	out	0x14, r24	; 20
			break;
 66a:	08 95       	ret
			case DIO_PORTD:
			CLEAR_BIT( DDRD, pin);
 66c:	21 b3       	in	r18, 0x11	; 17
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_SetPinDir+0x6e>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	6a 95       	dec	r22
 67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_SetPinDir+0x6a>
 67c:	80 95       	com	r24
 67e:	82 23       	and	r24, r18
 680:	81 bb       	out	0x11, r24	; 17
			break;
 682:	08 95       	ret
		}
		
		break;
		case OUTPUT_PIN:
		
		switch (port)
 684:	81 30       	cpi	r24, 0x01	; 1
 686:	89 f0       	breq	.+34     	; 0x6aa <DIO_SetPinDir+0xa0>
 688:	28 f0       	brcs	.+10     	; 0x694 <DIO_SetPinDir+0x8a>
 68a:	82 30       	cpi	r24, 0x02	; 2
 68c:	c9 f0       	breq	.+50     	; 0x6c0 <DIO_SetPinDir+0xb6>
 68e:	83 30       	cpi	r24, 0x03	; 3
 690:	11 f1       	breq	.+68     	; 0x6d6 <DIO_SetPinDir+0xcc>
 692:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT( DDRA, pin);
 694:	2a b3       	in	r18, 0x1a	; 26
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_SetPinDir+0x96>
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	6a 95       	dec	r22
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_SetPinDir+0x92>
 6a4:	82 2b       	or	r24, r18
 6a6:	8a bb       	out	0x1a, r24	; 26
			break;
 6a8:	08 95       	ret
			case DIO_PORTB:
			SET_BIT( DDRB, pin);
 6aa:	27 b3       	in	r18, 0x17	; 23
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_SetPinDir+0xac>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	6a 95       	dec	r22
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <DIO_SetPinDir+0xa8>
 6ba:	82 2b       	or	r24, r18
 6bc:	87 bb       	out	0x17, r24	; 23
			break;
 6be:	08 95       	ret
			case DIO_PORTC:
			SET_BIT( DDRC, pin);
 6c0:	24 b3       	in	r18, 0x14	; 20
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_SetPinDir+0xc2>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_SetPinDir+0xbe>
 6d0:	82 2b       	or	r24, r18
 6d2:	84 bb       	out	0x14, r24	; 20
			break;
 6d4:	08 95       	ret
			case DIO_PORTD:
			SET_BIT( DDRD, pin);
 6d6:	21 b3       	in	r18, 0x11	; 17
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <DIO_SetPinDir+0xd8>
 6de:	88 0f       	add	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	6a 95       	dec	r22
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <DIO_SetPinDir+0xd4>
 6e6:	82 2b       	or	r24, r18
 6e8:	81 bb       	out	0x11, r24	; 17
 6ea:	08 95       	ret

Disassembly of section .text.DIO_SetPinVal:

000006ec <DIO_SetPinVal>:
		
	}
}

void DIO_SetPinVal(PORT_TYPE port, PIN_TYPE pin, STATE_TYPE val) {
	switch (val)
 6ec:	44 23       	and	r20, r20
 6ee:	19 f0       	breq	.+6      	; 0x6f6 <DIO_SetPinVal+0xa>
 6f0:	41 30       	cpi	r20, 0x01	; 1
 6f2:	c9 f1       	breq	.+114    	; 0x766 <DIO_SetPinVal+0x7a>
 6f4:	08 95       	ret
	{
		case LOW_PIN:
		
		switch (port)
 6f6:	81 30       	cpi	r24, 0x01	; 1
 6f8:	91 f0       	breq	.+36     	; 0x71e <DIO_SetPinVal+0x32>
 6fa:	28 f0       	brcs	.+10     	; 0x706 <DIO_SetPinVal+0x1a>
 6fc:	82 30       	cpi	r24, 0x02	; 2
 6fe:	d9 f0       	breq	.+54     	; 0x736 <DIO_SetPinVal+0x4a>
 700:	83 30       	cpi	r24, 0x03	; 3
 702:	29 f1       	breq	.+74     	; 0x74e <DIO_SetPinVal+0x62>
 704:	08 95       	ret
		{
			case DIO_PORTA:
			CLEAR_BIT(PORTA, pin);
 706:	2b b3       	in	r18, 0x1b	; 27
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	02 c0       	rjmp	.+4      	; 0x712 <DIO_SetPinVal+0x26>
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	6a 95       	dec	r22
 714:	e2 f7       	brpl	.-8      	; 0x70e <DIO_SetPinVal+0x22>
 716:	80 95       	com	r24
 718:	82 23       	and	r24, r18
 71a:	8b bb       	out	0x1b, r24	; 27
			break;
 71c:	08 95       	ret
			case DIO_PORTB:
			CLEAR_BIT(PORTB, pin);
 71e:	28 b3       	in	r18, 0x18	; 24
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_SetPinVal+0x3e>
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	6a 95       	dec	r22
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_SetPinVal+0x3a>
 72e:	80 95       	com	r24
 730:	82 23       	and	r24, r18
 732:	88 bb       	out	0x18, r24	; 24
			break;
 734:	08 95       	ret
			case DIO_PORTC:
			CLEAR_BIT(PORTC, pin);
 736:	25 b3       	in	r18, 0x15	; 21
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_SetPinVal+0x56>
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	6a 95       	dec	r22
 744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_SetPinVal+0x52>
 746:	80 95       	com	r24
 748:	82 23       	and	r24, r18
 74a:	85 bb       	out	0x15, r24	; 21
			break;
 74c:	08 95       	ret
			case DIO_PORTD:
			CLEAR_BIT(PORTD, pin);
 74e:	22 b3       	in	r18, 0x12	; 18
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	02 c0       	rjmp	.+4      	; 0x75a <DIO_SetPinVal+0x6e>
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	6a 95       	dec	r22
 75c:	e2 f7       	brpl	.-8      	; 0x756 <DIO_SetPinVal+0x6a>
 75e:	80 95       	com	r24
 760:	82 23       	and	r24, r18
 762:	82 bb       	out	0x12, r24	; 18
			break;
 764:	08 95       	ret
			break;
		} break;
		
		case HIGH_PIN:
		
		switch (port)
 766:	81 30       	cpi	r24, 0x01	; 1
 768:	89 f0       	breq	.+34     	; 0x78c <DIO_SetPinVal+0xa0>
 76a:	28 f0       	brcs	.+10     	; 0x776 <DIO_SetPinVal+0x8a>
 76c:	82 30       	cpi	r24, 0x02	; 2
 76e:	c9 f0       	breq	.+50     	; 0x7a2 <DIO_SetPinVal+0xb6>
 770:	83 30       	cpi	r24, 0x03	; 3
 772:	11 f1       	breq	.+68     	; 0x7b8 <DIO_SetPinVal+0xcc>
 774:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 776:	2b b3       	in	r18, 0x1b	; 27
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_SetPinVal+0x96>
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	6a 95       	dec	r22
 784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_SetPinVal+0x92>
 786:	82 2b       	or	r24, r18
 788:	8b bb       	out	0x1b, r24	; 27
			break;
 78a:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 78c:	28 b3       	in	r18, 0x18	; 24
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	02 c0       	rjmp	.+4      	; 0x798 <DIO_SetPinVal+0xac>
 794:	88 0f       	add	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	6a 95       	dec	r22
 79a:	e2 f7       	brpl	.-8      	; 0x794 <DIO_SetPinVal+0xa8>
 79c:	82 2b       	or	r24, r18
 79e:	88 bb       	out	0x18, r24	; 24
			break;
 7a0:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 7a2:	25 b3       	in	r18, 0x15	; 21
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <DIO_SetPinVal+0xc2>
 7aa:	88 0f       	add	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	6a 95       	dec	r22
 7b0:	e2 f7       	brpl	.-8      	; 0x7aa <DIO_SetPinVal+0xbe>
 7b2:	82 2b       	or	r24, r18
 7b4:	85 bb       	out	0x15, r24	; 21
			break;
 7b6:	08 95       	ret
			case DIO_PORTD:
			SET_BIT (PORTD, pin);
 7b8:	22 b3       	in	r18, 0x12	; 18
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <DIO_SetPinVal+0xd8>
 7c0:	88 0f       	add	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	6a 95       	dec	r22
 7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <DIO_SetPinVal+0xd4>
 7c8:	82 2b       	or	r24, r18
 7ca:	82 bb       	out	0x12, r24	; 18
 7cc:	08 95       	ret

Disassembly of section .text.DIO_SetPortNibble:

000004d6 <DIO_SetPortNibble>:
	
}

void DIO_SetPortNibble(PORT_TYPE port, Uint8 Data,NIPPLE_TYPE np)
{
	switch (port)
 4d6:	81 30       	cpi	r24, 0x01	; 1
 4d8:	61 f1       	breq	.+88     	; 0x532 <DIO_SetPortNibble+0x5c>
 4da:	38 f0       	brcs	.+14     	; 0x4ea <DIO_SetPortNibble+0x14>
 4dc:	82 30       	cpi	r24, 0x02	; 2
 4de:	09 f4       	brne	.+2      	; 0x4e2 <DIO_SetPortNibble+0xc>
 4e0:	4c c0       	rjmp	.+152    	; 0x57a <DIO_SetPortNibble+0xa4>
 4e2:	83 30       	cpi	r24, 0x03	; 3
 4e4:	09 f4       	brne	.+2      	; 0x4e8 <DIO_SetPortNibble+0x12>
 4e6:	6d c0       	rjmp	.+218    	; 0x5c2 <DIO_SetPortNibble+0xec>
 4e8:	08 95       	ret
	{
		case DIO_PORTA:
		switch (np)
 4ea:	41 30       	cpi	r20, 0x01	; 1
 4ec:	99 f0       	breq	.+38     	; 0x514 <DIO_SetPortNibble+0x3e>
 4ee:	28 f0       	brcs	.+10     	; 0x4fa <DIO_SetPortNibble+0x24>
 4f0:	42 30       	cpi	r20, 0x02	; 2
 4f2:	49 f0       	breq	.+18     	; 0x506 <DIO_SetPortNibble+0x30>
 4f4:	43 30       	cpi	r20, 0x03	; 3
 4f6:	b9 f0       	breq	.+46     	; 0x526 <DIO_SetPortNibble+0x50>
 4f8:	08 95       	ret
		{
			case Data_H_To_Port_H:
			SET_H_PORT_H_DATA_NIBBLE(PORTA,Data);
 4fa:	8b b3       	in	r24, 0x1b	; 27
 4fc:	60 7f       	andi	r22, 0xF0	; 240
 4fe:	8f 70       	andi	r24, 0x0F	; 15
 500:	68 2b       	or	r22, r24
 502:	6b bb       	out	0x1b, r22	; 27
			break;
 504:	08 95       	ret
			case Data_H_To_Port_L:
			SET_L_PORT_H_DATA_NIBBLE(PORTA,Data);
 506:	8b b3       	in	r24, 0x1b	; 27
 508:	62 95       	swap	r22
 50a:	6f 70       	andi	r22, 0x0F	; 15
 50c:	80 7f       	andi	r24, 0xF0	; 240
 50e:	68 2b       	or	r22, r24
 510:	6b bb       	out	0x1b, r22	; 27
			break;
 512:	08 95       	ret
			case Data_L_To_Port_H:
			SET_H_PORT_L_DATA_NIBBLE(PORTA,Data);
 514:	80 e1       	ldi	r24, 0x10	; 16
 516:	68 9f       	mul	r22, r24
 518:	b0 01       	movw	r22, r0
 51a:	11 24       	eor	r1, r1
 51c:	8b b3       	in	r24, 0x1b	; 27
 51e:	8f 70       	andi	r24, 0x0F	; 15
 520:	68 2b       	or	r22, r24
 522:	6b bb       	out	0x1b, r22	; 27
			break;
 524:	08 95       	ret
			case Data_L_To_Port_L:
			SET_L_PORT_L_DATA_NIBBLE(PORTA,Data);
 526:	8b b3       	in	r24, 0x1b	; 27
 528:	6f 70       	andi	r22, 0x0F	; 15
 52a:	80 7f       	andi	r24, 0xF0	; 240
 52c:	68 2b       	or	r22, r24
 52e:	6b bb       	out	0x1b, r22	; 27
			break;
 530:	08 95       	ret
		}
		break;
		case DIO_PORTB:
		switch (np)
 532:	41 30       	cpi	r20, 0x01	; 1
 534:	99 f0       	breq	.+38     	; 0x55c <DIO_SetPortNibble+0x86>
 536:	28 f0       	brcs	.+10     	; 0x542 <DIO_SetPortNibble+0x6c>
 538:	42 30       	cpi	r20, 0x02	; 2
 53a:	49 f0       	breq	.+18     	; 0x54e <DIO_SetPortNibble+0x78>
 53c:	43 30       	cpi	r20, 0x03	; 3
 53e:	b9 f0       	breq	.+46     	; 0x56e <DIO_SetPortNibble+0x98>
 540:	08 95       	ret
		{
			case Data_H_To_Port_H:
			SET_H_PORT_H_DATA_NIBBLE(PORTB,Data);
 542:	88 b3       	in	r24, 0x18	; 24
 544:	60 7f       	andi	r22, 0xF0	; 240
 546:	8f 70       	andi	r24, 0x0F	; 15
 548:	68 2b       	or	r22, r24
 54a:	68 bb       	out	0x18, r22	; 24
			break;
 54c:	08 95       	ret
			case Data_H_To_Port_L:
			SET_L_PORT_H_DATA_NIBBLE(PORTB,Data);
 54e:	88 b3       	in	r24, 0x18	; 24
 550:	62 95       	swap	r22
 552:	6f 70       	andi	r22, 0x0F	; 15
 554:	80 7f       	andi	r24, 0xF0	; 240
 556:	68 2b       	or	r22, r24
 558:	68 bb       	out	0x18, r22	; 24
			break;
 55a:	08 95       	ret
			case Data_L_To_Port_H:
			SET_H_PORT_L_DATA_NIBBLE(PORTB,Data);
 55c:	80 e1       	ldi	r24, 0x10	; 16
 55e:	68 9f       	mul	r22, r24
 560:	b0 01       	movw	r22, r0
 562:	11 24       	eor	r1, r1
 564:	88 b3       	in	r24, 0x18	; 24
 566:	8f 70       	andi	r24, 0x0F	; 15
 568:	68 2b       	or	r22, r24
 56a:	68 bb       	out	0x18, r22	; 24
			break;
 56c:	08 95       	ret
			case Data_L_To_Port_L:
			SET_L_PORT_L_DATA_NIBBLE(PORTB,Data);
 56e:	88 b3       	in	r24, 0x18	; 24
 570:	6f 70       	andi	r22, 0x0F	; 15
 572:	80 7f       	andi	r24, 0xF0	; 240
 574:	68 2b       	or	r22, r24
 576:	68 bb       	out	0x18, r22	; 24
			break;
 578:	08 95       	ret
		}
		break;
		case DIO_PORTC:
		switch (np)
 57a:	41 30       	cpi	r20, 0x01	; 1
 57c:	99 f0       	breq	.+38     	; 0x5a4 <DIO_SetPortNibble+0xce>
 57e:	28 f0       	brcs	.+10     	; 0x58a <DIO_SetPortNibble+0xb4>
 580:	42 30       	cpi	r20, 0x02	; 2
 582:	49 f0       	breq	.+18     	; 0x596 <DIO_SetPortNibble+0xc0>
 584:	43 30       	cpi	r20, 0x03	; 3
 586:	b9 f0       	breq	.+46     	; 0x5b6 <DIO_SetPortNibble+0xe0>
 588:	08 95       	ret
		{
			case Data_H_To_Port_H:
			SET_H_PORT_H_DATA_NIBBLE(PORTC,Data);
 58a:	85 b3       	in	r24, 0x15	; 21
 58c:	60 7f       	andi	r22, 0xF0	; 240
 58e:	8f 70       	andi	r24, 0x0F	; 15
 590:	68 2b       	or	r22, r24
 592:	65 bb       	out	0x15, r22	; 21
			break;
 594:	08 95       	ret
			case Data_H_To_Port_L:
			SET_L_PORT_H_DATA_NIBBLE(PORTC,Data);
 596:	85 b3       	in	r24, 0x15	; 21
 598:	62 95       	swap	r22
 59a:	6f 70       	andi	r22, 0x0F	; 15
 59c:	80 7f       	andi	r24, 0xF0	; 240
 59e:	68 2b       	or	r22, r24
 5a0:	65 bb       	out	0x15, r22	; 21
			break;
 5a2:	08 95       	ret
			case Data_L_To_Port_H:
			SET_H_PORT_L_DATA_NIBBLE(PORTC,Data);
 5a4:	80 e1       	ldi	r24, 0x10	; 16
 5a6:	68 9f       	mul	r22, r24
 5a8:	b0 01       	movw	r22, r0
 5aa:	11 24       	eor	r1, r1
 5ac:	85 b3       	in	r24, 0x15	; 21
 5ae:	8f 70       	andi	r24, 0x0F	; 15
 5b0:	68 2b       	or	r22, r24
 5b2:	65 bb       	out	0x15, r22	; 21
			break;
 5b4:	08 95       	ret
			case Data_L_To_Port_L:
			SET_L_PORT_L_DATA_NIBBLE(PORTC,Data);
 5b6:	85 b3       	in	r24, 0x15	; 21
 5b8:	6f 70       	andi	r22, 0x0F	; 15
 5ba:	80 7f       	andi	r24, 0xF0	; 240
 5bc:	68 2b       	or	r22, r24
 5be:	65 bb       	out	0x15, r22	; 21
			break;
 5c0:	08 95       	ret
		}
		break;
		case DIO_PORTD:
		switch (np)
 5c2:	41 30       	cpi	r20, 0x01	; 1
 5c4:	99 f0       	breq	.+38     	; 0x5ec <DIO_SetPortNibble+0x116>
 5c6:	28 f0       	brcs	.+10     	; 0x5d2 <DIO_SetPortNibble+0xfc>
 5c8:	42 30       	cpi	r20, 0x02	; 2
 5ca:	49 f0       	breq	.+18     	; 0x5de <DIO_SetPortNibble+0x108>
 5cc:	43 30       	cpi	r20, 0x03	; 3
 5ce:	b9 f0       	breq	.+46     	; 0x5fe <DIO_SetPortNibble+0x128>
 5d0:	08 95       	ret
		{
			case Data_H_To_Port_H:
			SET_H_PORT_H_DATA_NIBBLE(PORTD,Data);
 5d2:	82 b3       	in	r24, 0x12	; 18
 5d4:	60 7f       	andi	r22, 0xF0	; 240
 5d6:	8f 70       	andi	r24, 0x0F	; 15
 5d8:	68 2b       	or	r22, r24
 5da:	62 bb       	out	0x12, r22	; 18
			break;
 5dc:	08 95       	ret
			case Data_H_To_Port_L:
			SET_L_PORT_H_DATA_NIBBLE(PORTD,Data);
 5de:	82 b3       	in	r24, 0x12	; 18
 5e0:	62 95       	swap	r22
 5e2:	6f 70       	andi	r22, 0x0F	; 15
 5e4:	80 7f       	andi	r24, 0xF0	; 240
 5e6:	68 2b       	or	r22, r24
 5e8:	62 bb       	out	0x12, r22	; 18
			break;
 5ea:	08 95       	ret
			case Data_L_To_Port_H:
			SET_H_PORT_L_DATA_NIBBLE(PORTD,Data);
 5ec:	80 e1       	ldi	r24, 0x10	; 16
 5ee:	68 9f       	mul	r22, r24
 5f0:	b0 01       	movw	r22, r0
 5f2:	11 24       	eor	r1, r1
 5f4:	82 b3       	in	r24, 0x12	; 18
 5f6:	8f 70       	andi	r24, 0x0F	; 15
 5f8:	68 2b       	or	r22, r24
 5fa:	62 bb       	out	0x12, r22	; 18
			break;
 5fc:	08 95       	ret
			case Data_L_To_Port_L:
			SET_L_PORT_L_DATA_NIBBLE(PORTD,Data);
 5fe:	82 b3       	in	r24, 0x12	; 18
 600:	6f 70       	andi	r22, 0x0F	; 15
 602:	80 7f       	andi	r24, 0xF0	; 240
 604:	68 2b       	or	r22, r24
 606:	62 bb       	out	0x12, r22	; 18
 608:	08 95       	ret

Disassembly of section .text:

0000120c <__divsf3>:
    120c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__divsf3x>
    1210:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__fp_round>

Disassembly of section .text:

000007ce <__divsf3x>:
 7ce:	10 c0       	rjmp	.+32     	; 0x7f0 <__divsf3x+0x22>
 7d0:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fp_pscB>
 7d4:	58 f0       	brcs	.+22     	; 0x7ec <__divsf3x+0x1e>
 7d6:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__fp_pscA>
 7da:	40 f0       	brcs	.+16     	; 0x7ec <__divsf3x+0x1e>
 7dc:	29 f4       	brne	.+10     	; 0x7e8 <__divsf3x+0x1a>
 7de:	5f 3f       	cpi	r21, 0xFF	; 255
 7e0:	29 f0       	breq	.+10     	; 0x7ec <__divsf3x+0x1e>
 7e2:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__fp_inf>
 7e6:	51 11       	cpse	r21, r1
 7e8:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__fp_szero>
 7ec:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <__fp_nan>
 7f0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__fp_split3>
 7f4:	68 f3       	brcs	.-38     	; 0x7d0 <__divsf3x+0x2>

000007f6 <__divsf3_pse>:
 7f6:	99 23       	and	r25, r25
 7f8:	b1 f3       	breq	.-20     	; 0x7e6 <__divsf3x+0x18>
 7fa:	55 23       	and	r21, r21
 7fc:	91 f3       	breq	.-28     	; 0x7e2 <__divsf3x+0x14>
 7fe:	95 1b       	sub	r25, r21
 800:	55 0b       	sbc	r21, r21
 802:	bb 27       	eor	r27, r27
 804:	aa 27       	eor	r26, r26
 806:	62 17       	cp	r22, r18
 808:	73 07       	cpc	r23, r19
 80a:	84 07       	cpc	r24, r20
 80c:	38 f0       	brcs	.+14     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 80e:	9f 5f       	subi	r25, 0xFF	; 255
 810:	5f 4f       	sbci	r21, 0xFF	; 255
 812:	22 0f       	add	r18, r18
 814:	33 1f       	adc	r19, r19
 816:	44 1f       	adc	r20, r20
 818:	aa 1f       	adc	r26, r26
 81a:	a9 f3       	breq	.-22     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 81c:	35 d0       	rcall	.+106    	; 0x888 <__stack+0x29>
 81e:	0e 2e       	mov	r0, r30
 820:	3a f0       	brmi	.+14     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 822:	e0 e8       	ldi	r30, 0x80	; 128
 824:	32 d0       	rcall	.+100    	; 0x88a <__stack+0x2b>
 826:	91 50       	subi	r25, 0x01	; 1
 828:	50 40       	sbci	r21, 0x00	; 0
 82a:	e6 95       	lsr	r30
 82c:	00 1c       	adc	r0, r0
 82e:	ca f7       	brpl	.-14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 830:	2b d0       	rcall	.+86     	; 0x888 <__stack+0x29>
 832:	fe 2f       	mov	r31, r30
 834:	29 d0       	rcall	.+82     	; 0x888 <__stack+0x29>
 836:	66 0f       	add	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	88 1f       	adc	r24, r24
 83c:	bb 1f       	adc	r27, r27
 83e:	26 17       	cp	r18, r22
 840:	37 07       	cpc	r19, r23
 842:	48 07       	cpc	r20, r24
 844:	ab 07       	cpc	r26, r27
 846:	b0 e8       	ldi	r27, 0x80	; 128
 848:	09 f0       	breq	.+2      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 84a:	bb 0b       	sbc	r27, r27
 84c:	80 2d       	mov	r24, r0
 84e:	bf 01       	movw	r22, r30
 850:	ff 27       	eor	r31, r31
 852:	93 58       	subi	r25, 0x83	; 131
 854:	5f 4f       	sbci	r21, 0xFF	; 255
 856:	3a f0       	brmi	.+14     	; 0x866 <__stack+0x7>
 858:	9e 3f       	cpi	r25, 0xFE	; 254
 85a:	51 05       	cpc	r21, r1
 85c:	78 f0       	brcs	.+30     	; 0x87c <__stack+0x1d>
 85e:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__fp_inf>
 862:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__fp_szero>
 866:	5f 3f       	cpi	r21, 0xFF	; 255
 868:	e4 f3       	brlt	.-8      	; 0x862 <__stack+0x3>
 86a:	98 3e       	cpi	r25, 0xE8	; 232
 86c:	d4 f3       	brlt	.-12     	; 0x862 <__stack+0x3>
 86e:	86 95       	lsr	r24
 870:	77 95       	ror	r23
 872:	67 95       	ror	r22
 874:	b7 95       	ror	r27
 876:	f7 95       	ror	r31
 878:	9f 5f       	subi	r25, 0xFF	; 255
 87a:	c9 f7       	brne	.-14     	; 0x86e <__stack+0xf>
 87c:	88 0f       	add	r24, r24
 87e:	91 1d       	adc	r25, r1
 880:	96 95       	lsr	r25
 882:	87 95       	ror	r24
 884:	97 f9       	bld	r25, 7
 886:	08 95       	ret
 888:	e1 e0       	ldi	r30, 0x01	; 1
 88a:	66 0f       	add	r22, r22
 88c:	77 1f       	adc	r23, r23
 88e:	88 1f       	adc	r24, r24
 890:	bb 1f       	adc	r27, r27
 892:	62 17       	cp	r22, r18
 894:	73 07       	cpc	r23, r19
 896:	84 07       	cpc	r24, r20
 898:	ba 07       	cpc	r27, r26
 89a:	20 f0       	brcs	.+8      	; 0x8a4 <__stack+0x45>
 89c:	62 1b       	sub	r22, r18
 89e:	73 0b       	sbc	r23, r19
 8a0:	84 0b       	sbc	r24, r20
 8a2:	ba 0b       	sbc	r27, r26
 8a4:	ee 1f       	adc	r30, r30
 8a6:	88 f7       	brcc	.-30     	; 0x88a <__stack+0x2b>
 8a8:	e0 95       	com	r30
 8aa:	08 95       	ret

Disassembly of section .text:

00000f88 <__fixunssfsi>:
 f88:	0e 94 fb 07 	call	0xff6	; 0xff6 <__fp_splitA>
 f8c:	88 f0       	brcs	.+34     	; 0xfb0 <__fixunssfsi+0x28>
 f8e:	9f 57       	subi	r25, 0x7F	; 127
 f90:	98 f0       	brcs	.+38     	; 0xfb8 <__fixunssfsi+0x30>
 f92:	b9 2f       	mov	r27, r25
 f94:	99 27       	eor	r25, r25
 f96:	b7 51       	subi	r27, 0x17	; 23
 f98:	b0 f0       	brcs	.+44     	; 0xfc6 <__fixunssfsi+0x3e>
 f9a:	e1 f0       	breq	.+56     	; 0xfd4 <__fixunssfsi+0x4c>
 f9c:	66 0f       	add	r22, r22
 f9e:	77 1f       	adc	r23, r23
 fa0:	88 1f       	adc	r24, r24
 fa2:	99 1f       	adc	r25, r25
 fa4:	1a f0       	brmi	.+6      	; 0xfac <__fixunssfsi+0x24>
 fa6:	ba 95       	dec	r27
 fa8:	c9 f7       	brne	.-14     	; 0xf9c <__fixunssfsi+0x14>
 faa:	14 c0       	rjmp	.+40     	; 0xfd4 <__fixunssfsi+0x4c>
 fac:	b1 30       	cpi	r27, 0x01	; 1
 fae:	91 f0       	breq	.+36     	; 0xfd4 <__fixunssfsi+0x4c>
 fb0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fp_zero>
 fb4:	b1 e0       	ldi	r27, 0x01	; 1
 fb6:	08 95       	ret
 fb8:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__fp_zero>
 fbc:	67 2f       	mov	r22, r23
 fbe:	78 2f       	mov	r23, r24
 fc0:	88 27       	eor	r24, r24
 fc2:	b8 5f       	subi	r27, 0xF8	; 248
 fc4:	39 f0       	breq	.+14     	; 0xfd4 <__fixunssfsi+0x4c>
 fc6:	b9 3f       	cpi	r27, 0xF9	; 249
 fc8:	cc f3       	brlt	.-14     	; 0xfbc <__fixunssfsi+0x34>
 fca:	86 95       	lsr	r24
 fcc:	77 95       	ror	r23
 fce:	67 95       	ror	r22
 fd0:	b3 95       	inc	r27
 fd2:	d9 f7       	brne	.-10     	; 0xfca <__fixunssfsi+0x42>
 fd4:	3e f4       	brtc	.+14     	; 0xfe4 <__fixunssfsi+0x5c>
 fd6:	90 95       	com	r25
 fd8:	80 95       	com	r24
 fda:	70 95       	com	r23
 fdc:	61 95       	neg	r22
 fde:	7f 4f       	sbci	r23, 0xFF	; 255
 fe0:	8f 4f       	sbci	r24, 0xFF	; 255
 fe2:	9f 4f       	sbci	r25, 0xFF	; 255
 fe4:	08 95       	ret

Disassembly of section .text:

00000e34 <__floatunsisf>:
 e34:	e8 94       	clt
 e36:	09 c0       	rjmp	.+18     	; 0xe4a <__floatsisf+0x12>

00000e38 <__floatsisf>:
 e38:	97 fb       	bst	r25, 7
 e3a:	3e f4       	brtc	.+14     	; 0xe4a <__floatsisf+0x12>
 e3c:	90 95       	com	r25
 e3e:	80 95       	com	r24
 e40:	70 95       	com	r23
 e42:	61 95       	neg	r22
 e44:	7f 4f       	sbci	r23, 0xFF	; 255
 e46:	8f 4f       	sbci	r24, 0xFF	; 255
 e48:	9f 4f       	sbci	r25, 0xFF	; 255
 e4a:	99 23       	and	r25, r25
 e4c:	a9 f0       	breq	.+42     	; 0xe78 <__floatsisf+0x40>
 e4e:	f9 2f       	mov	r31, r25
 e50:	96 e9       	ldi	r25, 0x96	; 150
 e52:	bb 27       	eor	r27, r27
 e54:	93 95       	inc	r25
 e56:	f6 95       	lsr	r31
 e58:	87 95       	ror	r24
 e5a:	77 95       	ror	r23
 e5c:	67 95       	ror	r22
 e5e:	b7 95       	ror	r27
 e60:	f1 11       	cpse	r31, r1
 e62:	f8 cf       	rjmp	.-16     	; 0xe54 <__floatsisf+0x1c>
 e64:	fa f4       	brpl	.+62     	; 0xea4 <__floatsisf+0x6c>
 e66:	bb 0f       	add	r27, r27
 e68:	11 f4       	brne	.+4      	; 0xe6e <__floatsisf+0x36>
 e6a:	60 ff       	sbrs	r22, 0
 e6c:	1b c0       	rjmp	.+54     	; 0xea4 <__floatsisf+0x6c>
 e6e:	6f 5f       	subi	r22, 0xFF	; 255
 e70:	7f 4f       	sbci	r23, 0xFF	; 255
 e72:	8f 4f       	sbci	r24, 0xFF	; 255
 e74:	9f 4f       	sbci	r25, 0xFF	; 255
 e76:	16 c0       	rjmp	.+44     	; 0xea4 <__floatsisf+0x6c>
 e78:	88 23       	and	r24, r24
 e7a:	11 f0       	breq	.+4      	; 0xe80 <__floatsisf+0x48>
 e7c:	96 e9       	ldi	r25, 0x96	; 150
 e7e:	11 c0       	rjmp	.+34     	; 0xea2 <__floatsisf+0x6a>
 e80:	77 23       	and	r23, r23
 e82:	21 f0       	breq	.+8      	; 0xe8c <__floatsisf+0x54>
 e84:	9e e8       	ldi	r25, 0x8E	; 142
 e86:	87 2f       	mov	r24, r23
 e88:	76 2f       	mov	r23, r22
 e8a:	05 c0       	rjmp	.+10     	; 0xe96 <__floatsisf+0x5e>
 e8c:	66 23       	and	r22, r22
 e8e:	71 f0       	breq	.+28     	; 0xeac <__floatsisf+0x74>
 e90:	96 e8       	ldi	r25, 0x86	; 134
 e92:	86 2f       	mov	r24, r22
 e94:	70 e0       	ldi	r23, 0x00	; 0
 e96:	60 e0       	ldi	r22, 0x00	; 0
 e98:	2a f0       	brmi	.+10     	; 0xea4 <__floatsisf+0x6c>
 e9a:	9a 95       	dec	r25
 e9c:	66 0f       	add	r22, r22
 e9e:	77 1f       	adc	r23, r23
 ea0:	88 1f       	adc	r24, r24
 ea2:	da f7       	brpl	.-10     	; 0xe9a <__floatsisf+0x62>
 ea4:	88 0f       	add	r24, r24
 ea6:	96 95       	lsr	r25
 ea8:	87 95       	ror	r24
 eaa:	97 f9       	bld	r25, 7
 eac:	08 95       	ret

Disassembly of section .text:

000011f8 <__fp_inf>:
    11f8:	97 f9       	bld	r25, 7
    11fa:	9f 67       	ori	r25, 0x7F	; 127
    11fc:	80 e8       	ldi	r24, 0x80	; 128
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	08 95       	ret

Disassembly of section .text:

00001214 <__fp_nan>:
    1214:	9f ef       	ldi	r25, 0xFF	; 255
    1216:	80 ec       	ldi	r24, 0xC0	; 192
    1218:	08 95       	ret

Disassembly of section .text:

000011ce <__fp_pscA>:
    11ce:	00 24       	eor	r0, r0
    11d0:	0a 94       	dec	r0
    11d2:	16 16       	cp	r1, r22
    11d4:	17 06       	cpc	r1, r23
    11d6:	18 06       	cpc	r1, r24
    11d8:	09 06       	cpc	r0, r25
    11da:	08 95       	ret

Disassembly of section .text:

000011dc <__fp_pscB>:
    11dc:	00 24       	eor	r0, r0
    11de:	0a 94       	dec	r0
    11e0:	12 16       	cp	r1, r18
    11e2:	13 06       	cpc	r1, r19
    11e4:	14 06       	cpc	r1, r20
    11e6:	05 06       	cpc	r0, r21
    11e8:	08 95       	ret

Disassembly of section .text:

00001130 <__fp_round>:
    1130:	09 2e       	mov	r0, r25
    1132:	03 94       	inc	r0
    1134:	00 0c       	add	r0, r0
    1136:	11 f4       	brne	.+4      	; 0x113c <__fp_round+0xc>
    1138:	88 23       	and	r24, r24
    113a:	52 f0       	brmi	.+20     	; 0x1150 <__fp_round+0x20>
    113c:	bb 0f       	add	r27, r27
    113e:	40 f4       	brcc	.+16     	; 0x1150 <__fp_round+0x20>
    1140:	bf 2b       	or	r27, r31
    1142:	11 f4       	brne	.+4      	; 0x1148 <__fp_round+0x18>
    1144:	60 ff       	sbrs	r22, 0
    1146:	04 c0       	rjmp	.+8      	; 0x1150 <__fp_round+0x20>
    1148:	6f 5f       	subi	r22, 0xFF	; 255
    114a:	7f 4f       	sbci	r23, 0xFF	; 255
    114c:	8f 4f       	sbci	r24, 0xFF	; 255
    114e:	9f 4f       	sbci	r25, 0xFF	; 255
    1150:	08 95       	ret

Disassembly of section .text:

00000fe6 <__fp_split3>:
     fe6:	57 fd       	sbrc	r21, 7
     fe8:	90 58       	subi	r25, 0x80	; 128
     fea:	44 0f       	add	r20, r20
     fec:	55 1f       	adc	r21, r21
     fee:	59 f0       	breq	.+22     	; 0x1006 <__fp_splitA+0x10>
     ff0:	5f 3f       	cpi	r21, 0xFF	; 255
     ff2:	71 f0       	breq	.+28     	; 0x1010 <__fp_splitA+0x1a>
     ff4:	47 95       	ror	r20

00000ff6 <__fp_splitA>:
     ff6:	88 0f       	add	r24, r24
     ff8:	97 fb       	bst	r25, 7
     ffa:	99 1f       	adc	r25, r25
     ffc:	61 f0       	breq	.+24     	; 0x1016 <__fp_splitA+0x20>
     ffe:	9f 3f       	cpi	r25, 0xFF	; 255
    1000:	79 f0       	breq	.+30     	; 0x1020 <__fp_splitA+0x2a>
    1002:	87 95       	ror	r24
    1004:	08 95       	ret
    1006:	12 16       	cp	r1, r18
    1008:	13 06       	cpc	r1, r19
    100a:	14 06       	cpc	r1, r20
    100c:	55 1f       	adc	r21, r21
    100e:	f2 cf       	rjmp	.-28     	; 0xff4 <__fp_split3+0xe>
    1010:	46 95       	lsr	r20
    1012:	f1 df       	rcall	.-30     	; 0xff6 <__fp_splitA>
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <__fp_splitA+0x30>
    1016:	16 16       	cp	r1, r22
    1018:	17 06       	cpc	r1, r23
    101a:	18 06       	cpc	r1, r24
    101c:	99 1f       	adc	r25, r25
    101e:	f1 cf       	rjmp	.-30     	; 0x1002 <__fp_splitA+0xc>
    1020:	86 95       	lsr	r24
    1022:	71 05       	cpc	r23, r1
    1024:	61 05       	cpc	r22, r1
    1026:	08 94       	sec
    1028:	08 95       	ret

Disassembly of section .text:

000011ea <__fp_zero>:
    11ea:	e8 94       	clt

000011ec <__fp_szero>:
    11ec:	bb 27       	eor	r27, r27
    11ee:	66 27       	eor	r22, r22
    11f0:	77 27       	eor	r23, r23
    11f2:	cb 01       	movw	r24, r22
    11f4:	97 f9       	bld	r25, 7
    11f6:	08 95       	ret

Disassembly of section .text.libgcc.div:

00001172 <__umoddi3>:
    1172:	68 94       	set
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <__udivdi3_umoddi3>

00001176 <__udivdi3>:
    1176:	e8 94       	clt

00001178 <__udivdi3_umoddi3>:
    1178:	8f 92       	push	r8
    117a:	9f 92       	push	r9
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	0e 94 69 05 	call	0xad2	; 0xad2 <__udivmod64>
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	9f 90       	pop	r9
    118a:	8f 90       	pop	r8
    118c:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000ad2 <__udivmod64>:
 ad2:	88 24       	eor	r8, r8
 ad4:	99 24       	eor	r9, r9
 ad6:	f4 01       	movw	r30, r8
 ad8:	e4 01       	movw	r28, r8
 ada:	b0 e4       	ldi	r27, 0x40	; 64
 adc:	9f 93       	push	r25
 ade:	aa 27       	eor	r26, r26
 ae0:	9a 15       	cp	r25, r10
 ae2:	8b 04       	cpc	r8, r11
 ae4:	9c 04       	cpc	r9, r12
 ae6:	ed 05       	cpc	r30, r13
 ae8:	fe 05       	cpc	r31, r14
 aea:	cf 05       	cpc	r28, r15
 aec:	d0 07       	cpc	r29, r16
 aee:	a1 07       	cpc	r26, r17
 af0:	98 f4       	brcc	.+38     	; 0xb18 <__udivmod64+0x46>
 af2:	ad 2f       	mov	r26, r29
 af4:	dc 2f       	mov	r29, r28
 af6:	cf 2f       	mov	r28, r31
 af8:	fe 2f       	mov	r31, r30
 afa:	e9 2d       	mov	r30, r9
 afc:	98 2c       	mov	r9, r8
 afe:	89 2e       	mov	r8, r25
 b00:	98 2f       	mov	r25, r24
 b02:	87 2f       	mov	r24, r23
 b04:	76 2f       	mov	r23, r22
 b06:	65 2f       	mov	r22, r21
 b08:	54 2f       	mov	r21, r20
 b0a:	43 2f       	mov	r20, r19
 b0c:	32 2f       	mov	r19, r18
 b0e:	22 27       	eor	r18, r18
 b10:	b8 50       	subi	r27, 0x08	; 8
 b12:	31 f7       	brne	.-52     	; 0xae0 <__udivmod64+0xe>
 b14:	bf 91       	pop	r27
 b16:	27 c0       	rjmp	.+78     	; 0xb66 <__udivmod64+0x94>
 b18:	1b 2e       	mov	r1, r27
 b1a:	bf 91       	pop	r27
 b1c:	bb 27       	eor	r27, r27
 b1e:	22 0f       	add	r18, r18
 b20:	33 1f       	adc	r19, r19
 b22:	44 1f       	adc	r20, r20
 b24:	55 1f       	adc	r21, r21
 b26:	66 1f       	adc	r22, r22
 b28:	77 1f       	adc	r23, r23
 b2a:	88 1f       	adc	r24, r24
 b2c:	99 1f       	adc	r25, r25
 b2e:	88 1c       	adc	r8, r8
 b30:	99 1c       	adc	r9, r9
 b32:	ee 1f       	adc	r30, r30
 b34:	ff 1f       	adc	r31, r31
 b36:	cc 1f       	adc	r28, r28
 b38:	dd 1f       	adc	r29, r29
 b3a:	aa 1f       	adc	r26, r26
 b3c:	bb 1f       	adc	r27, r27
 b3e:	8a 14       	cp	r8, r10
 b40:	9b 04       	cpc	r9, r11
 b42:	ec 05       	cpc	r30, r12
 b44:	fd 05       	cpc	r31, r13
 b46:	ce 05       	cpc	r28, r14
 b48:	df 05       	cpc	r29, r15
 b4a:	a0 07       	cpc	r26, r16
 b4c:	b1 07       	cpc	r27, r17
 b4e:	48 f0       	brcs	.+18     	; 0xb62 <__udivmod64+0x90>
 b50:	8a 18       	sub	r8, r10
 b52:	9b 08       	sbc	r9, r11
 b54:	ec 09       	sbc	r30, r12
 b56:	fd 09       	sbc	r31, r13
 b58:	ce 09       	sbc	r28, r14
 b5a:	df 09       	sbc	r29, r15
 b5c:	a0 0b       	sbc	r26, r16
 b5e:	b1 0b       	sbc	r27, r17
 b60:	21 60       	ori	r18, 0x01	; 1
 b62:	1a 94       	dec	r1
 b64:	e1 f6       	brne	.-72     	; 0xb1e <__udivmod64+0x4c>
 b66:	2e f4       	brtc	.+10     	; 0xb72 <__udivmod64+0xa0>
 b68:	94 01       	movw	r18, r8
 b6a:	af 01       	movw	r20, r30
 b6c:	be 01       	movw	r22, r28
 b6e:	cd 01       	movw	r24, r26
 b70:	00 0c       	add	r0, r0
 b72:	08 95       	ret

Disassembly of section .text.libgcc:

00001152 <__negdi2>:
    1152:	60 95       	com	r22
    1154:	70 95       	com	r23
    1156:	80 95       	com	r24
    1158:	90 95       	com	r25
    115a:	30 95       	com	r19
    115c:	40 95       	com	r20
    115e:	50 95       	com	r21
    1160:	21 95       	neg	r18
    1162:	3f 4f       	sbci	r19, 0xFF	; 255
    1164:	4f 4f       	sbci	r20, 0xFF	; 255
    1166:	5f 4f       	sbci	r21, 0xFF	; 255
    1168:	6f 4f       	sbci	r22, 0xFF	; 255
    116a:	7f 4f       	sbci	r23, 0xFF	; 255
    116c:	8f 4f       	sbci	r24, 0xFF	; 255
    116e:	9f 4f       	sbci	r25, 0xFF	; 255
    1170:	08 95       	ret

Disassembly of section .text.libgcc.builtins:

0000109e <__ashldi3>:
    109e:	0f 93       	push	r16
    10a0:	08 30       	cpi	r16, 0x08	; 8
    10a2:	90 f0       	brcs	.+36     	; 0x10c8 <__ashldi3+0x2a>
    10a4:	98 2f       	mov	r25, r24
    10a6:	87 2f       	mov	r24, r23
    10a8:	76 2f       	mov	r23, r22
    10aa:	65 2f       	mov	r22, r21
    10ac:	54 2f       	mov	r21, r20
    10ae:	43 2f       	mov	r20, r19
    10b0:	32 2f       	mov	r19, r18
    10b2:	22 27       	eor	r18, r18
    10b4:	08 50       	subi	r16, 0x08	; 8
    10b6:	f4 cf       	rjmp	.-24     	; 0x10a0 <__ashldi3+0x2>
    10b8:	22 0f       	add	r18, r18
    10ba:	33 1f       	adc	r19, r19
    10bc:	44 1f       	adc	r20, r20
    10be:	55 1f       	adc	r21, r21
    10c0:	66 1f       	adc	r22, r22
    10c2:	77 1f       	adc	r23, r23
    10c4:	88 1f       	adc	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 95       	dec	r16
    10ca:	b2 f7       	brpl	.-20     	; 0x10b8 <__ashldi3+0x1a>
    10cc:	0f 91       	pop	r16
    10ce:	08 95       	ret

Disassembly of section .text.libgcc:

000011bc <__adddi3>:
    11bc:	2a 0d       	add	r18, r10
    11be:	3b 1d       	adc	r19, r11
    11c0:	4c 1d       	adc	r20, r12
    11c2:	5d 1d       	adc	r21, r13
    11c4:	6e 1d       	adc	r22, r14
    11c6:	7f 1d       	adc	r23, r15
    11c8:	80 1f       	adc	r24, r16
    11ca:	91 1f       	adc	r25, r17
    11cc:	08 95       	ret

Disassembly of section .text.libgcc:

0000118e <__cmpdi2_s8>:
    118e:	00 24       	eor	r0, r0
    1190:	a7 fd       	sbrc	r26, 7
    1192:	00 94       	com	r0
    1194:	2a 17       	cp	r18, r26
    1196:	30 05       	cpc	r19, r0
    1198:	40 05       	cpc	r20, r0
    119a:	50 05       	cpc	r21, r0
    119c:	60 05       	cpc	r22, r0
    119e:	70 05       	cpc	r23, r0
    11a0:	80 05       	cpc	r24, r0
    11a2:	90 05       	cpc	r25, r0
    11a4:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00001222 <_fini>:
    1222:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00001224 <__funcs_on_exit>:
    1224:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00001226 <__simulator_exit>:
    1226:	08 95       	ret

Disassembly of section .text.exit:

000011a6 <exit>:
    11a6:	ec 01       	movw	r28, r24
    11a8:	0e 94 12 09 	call	0x1224	; 0x1224 <__funcs_on_exit>
    11ac:	0e 94 11 09 	call	0x1222	; 0x1222 <_fini>
    11b0:	ce 01       	movw	r24, r28
    11b2:	0e 94 13 09 	call	0x1226	; 0x1226 <__simulator_exit>
    11b6:	ce 01       	movw	r24, r28
    11b8:	0e 94 0f 09 	call	0x121e	; 0x121e <_Exit>

Disassembly of section .text._Exit:

0000121e <_Exit>:
    121e:	0e 94 58 00 	call	0xb0	; 0xb0 <_exit>
